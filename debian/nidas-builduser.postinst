#!/bin/sh

# postinst script for nidas-builduser
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

case "$1" in
    configure|triggered)
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

if [ "$1" = "configure" -o "$1" = "triggered" ]; then
    nidas_prefix=/opt/nidas

    cfile=/var/lib/nidas/BuildUserGroup
    if [ -f $cfile ]; then

        # read BuildUserGroup, containing one line with the following format:
        #   user(uid):group(gid)
        # where user and group are alphanumeric names, uid and gid are numeric ids.
        delim=:
        user=`cut -d "$delim" -f 1 $cfile`
        group=`cut -d "$delim" -f 2 $cfile`

        if echo $user | grep -F -q "("; then
            uid=`echo $user | cut -d "(" -f 2 | cut -d ")" -f 1`
            user=`echo $user | cut -d "(" -f 1`
        fi
        if echo $group | grep -F -q "("; then
            gid=`echo $group | cut -d "(" -f 2 | cut -d ")" -f 1`
            group=`echo $group | cut -d "(" -f 1`
        fi

        echo "user=$user, group=$group read from $cfile"

        if [ "$user" != root -o "$group" != root ]; then

            # Add a user and group to system, so that installed files on
            # /opt/nidas are owned and writable by the group, rather than root.
            adduser=false
            addgroup=false
            grep -q "^$user" /etc/passwd || adduser=true
            grep -q "^$group" /etc/group || addgroup=true

            # check if NIS is running. If so, check if user.group is known to NIS
            if which ypwhich > /dev/null 2>&1 && ypwhich > /dev/null 2>&1; then
                ypmatch $user passwd > /dev/null 2>&1 && adduser=false
                ypmatch $group group > /dev/null 2>&1 && addgroup=false
            fi

            $addgroup && groupadd -g $gid -o eol
            export USERGROUPS_ENAB=no
            $adduser && useradd  -u $uid -o -M -g $group -s /sbin/nologin -d /tmp -c "NIDAS build user" -K PASS_MAX_DAYS=-1 $user || :

            n=$(find $nidas_prefix \( \! -user $user -o \! -group $group \) -execdir chown $user:$group {} + -print | wc -l)
            [ $n -gt 0 ] && echo "Set owner of files under $nidas_prefix to $user.$group"

            find $nidas_prefix \! -perm /g+w -execdir chmod g+w {} +

            # chown on a file removes any associated capabilities
            if which setcap > /dev/null; then
                echo "trigger, doing setcap on $nidas_prefix/bin/{dsm_server,dsm}"
                setcap cap_sys_nice,cap_net_admin+p $nidas_prefix/bin/dsm_server
                setcap cap_sys_nice,cap_net_admin+p $nidas_prefix/bin/dsm
            fi
        fi
    fi
fi

exit 0
