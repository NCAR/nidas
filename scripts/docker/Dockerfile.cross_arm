ARG hostarch=armel

FROM docker.io/ncar/nidas-build-debian-base-${hostarch}:jessie
LABEL organization="NCAR EOL"

# FROM line above "consumes" hostarch arg, unless we re-declare it header
# But don't re-assign it!!!
ARG hostarch

RUN echo "hostarch == $hostarch"

RUN sudo dpkg --add-architecture ${hostarch}

# We're using podman, so set USER to root:root
USER root:root

# Rip out jessie updates repos as they no longer exist. 
# See https://www.lucas-nussbaum.net/blog/?p=947
RUN sed -i "/updates/d" /etc/apt/sources.list

# http://emdebian.org/tools/debian/ no longer exists
RUN mv /etc/apt/sources.list.d/crosstools.list /etc/apt/sources.list.d/crosstools.list.disable

# Also, backports has moved to archive, so fix that
# RUN sed -i "s/ftp.debian.org/archive.debian.org/g" /etc/apt/sources.list
RUN echo deb http://archive.debian.org/debian/ jessie main >> /etc/apt/sources.list

RUN echo "Acquire::Check-Valid-Until no;" > /etc/apt/apt.conf.d/99no-check-valid-until
RUN cat /etc/apt/sources.list

# The emdebian repo is no longer reachable, so disable it.
RUN mv /etc/apt/sources.list.d/crosstools.list /etc/apt/sources.list.d/crosstools.list.disable

# add boost-regex/filesystem
RUN apt-get -y --no-install-recommends --allow-unauthenticated install libboost-regex1.55-dev:${hostarch} libboost-filesystem1.55-dev:${hostarch}

# add libi2c-dev as original docker image didn't have correct one
# don't need an ${hostarch} variant, as all the functions are in-line
# in a single header.
RUN apt-get -y --allow-unauthenticated install libi2c-dev

# 12/3/22:  Add :amd64 to wget. Otherwise because we've done a
# "dpkg add-architecture=armel" apt also looks for wget:armel
# and apparently can't find it in jessie repos.
RUN apt-get update && apt-get -y --no-install-recommends --allow-unauthenticated install wget:amd64

# RUN apt-get -y --no-install-recommends --allow-unauthenticated install libftdi-dev:${hostarch}

# 12/3/22: As with wget above, add :amd64 to the package name for rsync
RUN apt-get update && apt-get -y install --no-install-recommends --allow-unauthenticated reprepro xmlto rsync:amd64 lintian

# ENV CROSS_ARCH=$hostarch

# RUN addgroup --gid $gid $group || echo "add group failed"
# RUN adduser --ingroup $group --disabled-password --uid $uid --gecos '' $user && echo "${user}:${user}" | chpasswd && adduser $user sudo

WORKDIR /root

# Get cross tools from emdebian
#RUN echo "deb http://emdebian.org/tools/debian/ jessie main" >> /etc/apt/sources.list.d/crosstools.list
#RUN curl http://emdebian.org/tools/debian/emdebian-toolchain-archive.key | apt-key add -
#RUN apt-get install -y --no-install-recommends crossbuild-essential-${hostarch}

# Add EOL repository for some local packages
RUN echo "deb ftp://ftp.eol.ucar.edu/pub/archive/software/debian/ jessie main" > /etc/apt/sources.list.d/eol.list && curl ftp://ftp.eol.ucar.edu/pub/archive/software/debian/conf/eol-prog.gpg.key | apt-key add -

# local packages
# hack: also install xmlrpc++-dev for build (amd64) architecture, so that scons
# finds the xmlrpc++ pkg-config file (xmlrpcpp.pc). Need to fix xmlrpc++ to add
# a correct pkg-config file for cross building.
RUN apt-get install -y --no-install-recommends xmlrpc++-dev:${hostarch} xmlrpc++-dev

# other development packages
#RUN apt-get install -y --no-install-recommends git scons flex gawk devscripts pkg-config libbz2-dev:${hostarch} libgsl0ldbl:${hostarch} libgsl0-dev:${hostarch} libcap-dev:${hostarch} libxerces-c-dev:${hostarch} libbluetooth-dev:${hostarch} libnetcdf-dev:${hostarch}

# viper, titan headers
RUN /bin/bash -c "if [ ${hostarch} == armel ]; then apt-get -y install linux-headers-3.16.0-titan2:${hostarch} linux-headers-3.16.0-viper2:${hostarch}; fi"

# Scons now needs at least python 3.6 and the jessie repo only has 3.4.2
# Install python using pyenv.
# Install dev packages needed by pyenv
RUN apt-get update && apt-get install -y --allow-unauthenticated --no-install-recommends \
        libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev

RUN curl -L https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer | bash

RUN export PYENV_ROOT=/root/.pyenv && \
    export PATH=/root/.pyenv/bin:$PATH && \
    eval "$(pyenv init -)" && \
    pyenv install 3.6.3 && \
    pyenv global 3.6.3 && \
    pip3 install scons

RUN grep -F -q pyenv /root/.bashrc || echo 'export PYENV_ROOT=/root/.pyenv; export PATH=/root/.pyenv/bin:$PATH; eval "$(pyenv init -)"' >> /root/.bashrc

# Setup pyenv for python3, then install eol-scons
# Add the version number, eol-scons=W.X.Y.Z so that a new image is created
RUN apt-get update && export PYENV_ROOT=/root/.pyenv && \
    export PATH=/root/.pyenv/bin:$PATH && \
    eval "$(pyenv init -)" && \
    which python && \
    python --version && \
    apt-get install -y --no-install-recommends eol-scons=4.2.1.4


# GPG_TTY is needed for package signing
RUN printf 'umask 0002\nexport GPG_TTY=$(tty)\n' >> .bashrc
# start gpg-agent, using unique socket to avoid gpg2 version compatibility
# with host. gpg-agent returns value for GPG_AGENT_INFO which has the name
# of the socket.  .profile is not sourced on startup, only .bashrc.
RUN printf 'gpg-connect-agent /bye 2>/dev/null || eval $(gpg-agent --daemon --no-use-standard-socket)\n' >> .bashrc
