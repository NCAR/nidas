# -*- python -*-

##  Copyright 2005 UCAR, NCAR, All Rights Reserved

import glob
import fnmatch
import os

def Glob(match):
    """Similar to glob.glob, except globs SCons nodes, and thus sees
    generated files and files from build directories.  Basically, it sees
    anything SCons knows about.  A key subtlety is that since this function
    operates on generated nodes as well as source nodes on the filesystem,
    it needs to be called after builders that generate files you want to
    include."""
    def fn_filter(node):
        fn = str(node)
        return fnmatch.fnmatch(os.path.basename(fn), match)

    here = Dir('.')

    children = here.all_children()
    nodes = map(File, filter(fn_filter, children))
    node_srcs = [n.srcnode() for n in nodes]

    src = here.srcnode()
    if src is not here:
        src_children = map(File, filter(fn_filter, src.all_children()))
        for s in src_children:
            if s not in node_srcs:
                nodes.append(File(os.path.basename(str(s))))

    return nodes

##
##  Import the cross-build environment.
##
Import('env')
myenv = env.Copy()

conf = Configure(myenv)

##
## Look for PostgreSQL header file. If found, build PSQL source files
##
if conf.CheckCHeader('libpq-fe.h'):
    PSQLSources = Split("""
	PSQLChannel.cc
	PSQLSampleOutput.cc
	PSQLProcessor.cc
    """)
else:
    PSQLSources = []

myenv = conf.Finish()

version = myenv.Command('Version.h','Version.h.tmpl',
	'sed -e "s/SOFTWARE_VERSION/`svnversion .`/" < $SOURCE > $TARGET')
myenv.AlwaysBuild(version)
Depends('Version.h','Version.h.tmpl')

# -ggdb
# -DXML_DEBUG
myenv.AppendUnique(CXXFLAGS = Split("""
"""))

##
##  List the source files compiled into the libDsm.a library.
##

sources = [ Split("""

  Project.cc
  Site.cc
  Aircraft.cc
  DSMConfig.cc
  SensorCatalog.cc

  DSMEngine.cc
  DSMEngineIntf.cc
  DSMServer.cc
  DSMServerIntf.cc
  StatusThread.cc
  XmlRpcThread.cc

  DSMSensor.cc
  RTL_DevIoctl.cc
  RTL_DevIoctlStore.cc
  RTL_DSMSensor.cc

  DSMArincSensor.cc
    ADC_HW_EB7022597.cc
    GPS_HW_HG2021GB02.cc
    Arinc_IRS.cc
      IRS_HW_HG2001GD.cc
      IRS_HW_YG1854.cc
  
  DSMSerialSensor.cc
  AsciiScanner.cc
  GPS_NMEA_Serial.cc
  IRIGSensor.cc
  DSMAnalogSensor.cc
  A2DBoardTempSensor.cc

  Sample.cc
  Variable.cc
  VariableConverter.cc
  SampleTag.cc
  Parameter.cc

  SampleClientList.cc
  SampleSourceImpl.cc

  PortSelector.cc
  PortSelectorTest.cc
  RemoteSerialConnection.cc
  RemoteSerialListener.cc

  DOMObjectFactory.cc
  DynamicLoader.cc
  DOMable.cc

  XMLParser.cc
  XMLConfigWriter.cc
  XMLFdFormatTarget.cc
  XMLException.cc

  DSMService.cc
  XMLConfigService.cc
  RawSampleService.cc

  SampleSorter.cc
  SyncRecordSource.cc

  IOChannel.cc
  IOStream.cc
  Socket.cc
  McSocket.cc
  FileSet.cc

  SampleInput.cc
  SampleOutput.cc
  SampleFileHeader.cc
  RawSampleOutputStream.cc
  RawSampleInputStream.cc
  SampleDater.cc

  SampleIOProcessor.cc
  SyncRecordGenerator.cc
  SampleArchiver.cc
  SampleAverager.cc
  ConnectionRequester.cc

  SyncRecordReader.cc

"""),PSQLSources]

## myenv['LEXCOM'] = '$LEX $LEXFLAGS -t $SOURCES > $TARGET'

## myenv['LEXFLAGS'] = Split("""
##     -Pscanf_fmt_yy -+
## """)

myenv.CXXFile(target='AsciiScanner.cc',source='AsciiScanner.ll')

##
##  Build the libArmDsm.a library.
##
lib = myenv.SharedLibrary('Dsm' , sources)

##
## Install target for library.
##
myenv.Install('$ADS3_INSTALL/lib',lib)

##
## Install target for headers.  Must look in parent of build directory
##
headers = glob.glob("../*.h")
#
# Glob is too sophisticated. It incorporates results of Configure,
# and includes libpg-fe.h in its list.  Jeeeesh.
# headers = Glob("*.h")
# print(["headers="] + [str(h) for h in headers])

myenv.Install('$ADS3_INSTALL/include',headers)
