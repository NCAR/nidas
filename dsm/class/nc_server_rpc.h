/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _NC_SERVER_RPC_H_RPCGEN
#define	_NC_SERVER_RPC_H_RPCGEN

#include <rpc/rpc.h>

#ifdef __cplusplus
extern "C" {
#endif


enum NS_rectype {
	NS_MINIMUM = 0,
	NS_MEANN = 1,
	NS_MEAN = 2,
	NS_COVN = 3,
	NS_COV = 4,
	NS_FLUX = 5,
	NS_RFLUX = 6,
	NS_SFLUX = 7,
	NS_TRIVAR = 8,
	NS_PRUNEDTRIVAR = 9,
	NS_TIMESERIES = 10
};
typedef enum NS_rectype NS_rectype;

enum NS_datatype {
	NS_LONG = 4,
	NS_FLOAT = 5
};
typedef enum NS_datatype NS_datatype;

typedef int NSlong;

struct field {
	char *name;
	char *units;
};
typedef struct field field;

struct dimension {
	char *name;
	int size;
};
typedef struct dimension dimension;

struct str_attr {
	char *name;
	char *value;
};
typedef struct str_attr str_attr;

struct str_attrs {
	struct {
		u_int attrs_len;
		str_attr *attrs_val;
	} attrs;
};
typedef struct str_attrs str_attrs;

struct datadef {
	double interval;
	int connectionId;
	NS_rectype rectype;
	NS_datatype datatype;
	struct {
		u_int fields_len;
		field *fields_val;
	} fields;
	struct {
		u_int dimensions_len;
		dimension *dimensions_val;
	} dimensions;
	struct {
		u_int attrs_len;
		str_attrs *attrs_val;
	} attrs;
	float floatFill;
	NSlong longFill;
	bool_t fillmissingrecords;
};
typedef struct datadef datadef;

struct datarec_float {
	double time;
	struct {
		u_int data_len;
		float *data_val;
	} data;
	int connectionId;
	int datarecId;
	struct {
		u_int cnts_len;
		NSlong *cnts_val;
	} cnts;
	struct {
		u_int start_len;
		int *start_val;
	} start;
	struct {
		u_int count_len;
		int *count_val;
	} count;
};
typedef struct datarec_float datarec_float;

struct datarec_long {
	double time;
	struct {
		u_int data_len;
		NSlong *data_val;
	} data;
	int connectionId;
	int datarecId;
	struct {
		u_int cnts_len;
		NSlong *cnts_val;
	} cnts;
	struct {
		u_int start_len;
		int *start_val;
	} start;
	struct {
		u_int count_len;
		int *count_val;
	} count;
};
typedef struct datarec_long datarec_long;

struct historyrec {
	char *history;
	int connectionId;
};
typedef struct historyrec historyrec;

struct connection {
	double filelength;
	double interval;
	char *filenamefmt;
	char *outputdir;
	char *cdlfile;
};
typedef struct connection connection;

#define	NETCDFSERVERPROG	0x20000004
#define	NETCDFSERVERVERS	1

#if defined(__STDC__) || defined(__cplusplus)
#define	OPENCONNECTION	1
extern  int * openconnection_1(connection *, CLIENT *);
extern  int * openconnection_1_svc(connection *, struct svc_req *);
#define	WRITEDATAREC_FLOAT	2
extern  int * writedatarec_float_1(datarec_float *, CLIENT *);
extern  int * writedatarec_float_1_svc(datarec_float *, struct svc_req *);
#define	CLOSECONNECTION	3
extern  int * closeconnection_1(int *, CLIENT *);
extern  int * closeconnection_1_svc(int *, struct svc_req *);
#define	WRITEDATARECBATCH_FLOAT	4
extern  void * writedatarecbatch_float_1(datarec_float *, CLIENT *);
extern  void * writedatarecbatch_float_1_svc(datarec_float *, struct svc_req *);
#define	WRITEHISTORYRECBATCH	5
extern  void * writehistoryrecbatch_1(historyrec *, CLIENT *);
extern  void * writehistoryrecbatch_1_svc(historyrec *, struct svc_req *);
#define	DEFINEDATAREC	6
extern  int * definedatarec_1(datadef *, CLIENT *);
extern  int * definedatarec_1_svc(datadef *, struct svc_req *);
#define	WRITEHISTORYREC	7
extern  int * writehistoryrec_1(historyrec *, CLIENT *);
extern  int * writehistoryrec_1_svc(historyrec *, struct svc_req *);
#define	WRITEDATAREC_LONG	8
extern  int * writedatarec_long_1(datarec_long *, CLIENT *);
extern  int * writedatarec_long_1_svc(datarec_long *, struct svc_req *);
#define	WRITEDATARECBATCH_LONG	9
extern  void * writedatarecbatch_long_1(datarec_long *, CLIENT *);
extern  void * writedatarecbatch_long_1_svc(datarec_long *, struct svc_req *);
#define	CLOSEFILES	10
extern  int * closefiles_1(void *, CLIENT *);
extern  int * closefiles_1_svc(void *, struct svc_req *);
#define	SHUTDOWN	11
extern  void * shutdown_1(void *, CLIENT *);
extern  void * shutdown_1_svc(void *, struct svc_req *);

#else /* K&R C */
#define	OPENCONNECTION	1
extern  int * openconnection_1();
extern  int * openconnection_1_svc();
#define	WRITEDATAREC_FLOAT	2
extern  int * writedatarec_float_1();
extern  int * writedatarec_float_1_svc();
#define	CLOSECONNECTION	3
extern  int * closeconnection_1();
extern  int * closeconnection_1_svc();
#define	WRITEDATARECBATCH_FLOAT	4
extern  void * writedatarecbatch_float_1();
extern  void * writedatarecbatch_float_1_svc();
#define	WRITEHISTORYRECBATCH	5
extern  void * writehistoryrecbatch_1();
extern  void * writehistoryrecbatch_1_svc();
#define	DEFINEDATAREC	6
extern  int * definedatarec_1();
extern  int * definedatarec_1_svc();
#define	WRITEHISTORYREC	7
extern  int * writehistoryrec_1();
extern  int * writehistoryrec_1_svc();
#define	WRITEDATAREC_LONG	8
extern  int * writedatarec_long_1();
extern  int * writedatarec_long_1_svc();
#define	WRITEDATARECBATCH_LONG	9
extern  void * writedatarecbatch_long_1();
extern  void * writedatarecbatch_long_1_svc();
#define	CLOSEFILES	10
extern  int * closefiles_1();
extern  int * closefiles_1_svc();
#define	SHUTDOWN	11
extern  void * shutdown_1();
extern  void * shutdown_1_svc();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_NS_rectype(XDR *, NS_rectype*);
extern  bool_t xdr_NS_datatype(XDR *, NS_datatype*);
extern  bool_t xdr_NSlong(XDR *, NSlong*);
extern  bool_t xdr_field(XDR *, field*);
extern  bool_t xdr_dimension(XDR *, dimension*);
extern  bool_t xdr_str_attr(XDR *, str_attr*);
extern  bool_t xdr_str_attrs(XDR *, str_attrs*);
extern  bool_t xdr_datadef(XDR *, datadef*);
extern  bool_t xdr_datarec_float(XDR *, datarec_float*);
extern  bool_t xdr_datarec_long(XDR *, datarec_long*);
extern  bool_t xdr_historyrec(XDR *, historyrec*);
extern  bool_t xdr_connection(XDR *, connection*);

#else /* K&R C */
extern bool_t xdr_NS_rectype();
extern bool_t xdr_NS_datatype();
extern bool_t xdr_NSlong();
extern bool_t xdr_field();
extern bool_t xdr_dimension();
extern bool_t xdr_str_attr();
extern bool_t xdr_str_attrs();
extern bool_t xdr_datadef();
extern bool_t xdr_datarec_float();
extern bool_t xdr_datarec_long();
extern bool_t xdr_historyrec();
extern bool_t xdr_connection();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_NC_SERVER_RPC_H_RPCGEN */
