# -*- python -*-
##  Copyright 2005,2006 UCAR, NCAR, All Rights Reserved

import os,sys,re

# Create the global variables with a custom config file before the first
# environment is created.
import eol_scons
opts = eol_scons.GlobalVariables("nidas.conf")

# Default global tools are not needed for NIDAS, so remove them.
tools = eol_scons.GlobalTools()
del tools[:]

##
##  Create a new construction environment variable and
##  restrict it's build methods to be POSIX based only.
##
paths = os.environ['PATH'].split(':')

env = Environment(platform = 'posix', ENV = {'PATH' : ':'.join(paths)})

opts.AddVariables(
    PathVariable('PREFIX',
               'installation paths: $PREFIX/x86, $PREFIX/arm, $PREFIX/armbe, $PREFIX/share',
               '/opt/local/nidas', PathVariable.PathAccept))
opts.AddVariables(
    PathVariable('OTHER_PREFIX',
               'Optional prefix for other dependencies.',
               '/opt/local/nidas', PathVariable.PathAccept))

# def kerneldir_validator(key,val,env):
# 	if val != '':
# 		return PathOption.PathExists(key,val,end)
# 	return

opts.Add('BUILDS',
         'Space-separated list of architectures to build and install.',
         'x86 arm armbe')
opts.Add(BoolVariable('DEBUG', 'Define DEBUG symbol.', 'off'))
opts.Add(BoolVariable('XMLDEBUG', 'Enable the XML_DEBUG definition.',
                      'off'))
opts.Add(BoolVariable('GDBDEBUG', 'Enable -ggdb flag.', 'off'))
opts.Add(BoolVariable('PSQL_ENABLE', 'Build PSQL modules when detected.', 
                      'off'))
opts.Add(BoolVariable('LINUX_MODULES', 
                      'Build linux and rtlinux modules when possible.', 'on'))

# Use PREFIX to generate defaults for the OTHER prefixes, so the OTHER
# prefixes will just be redundant if not specified.  Don't add the other
# options at all unless the corresponding build architecture is selected.
# 
opts.Update(env)
BUILDS = Split(env['BUILDS'])

if 'x86' in BUILDS:
    opts.Add('OTHER_X86',
             'Optional path to xerces-c and xmlrpc++ for X86:',
             '$OTHER_PREFIX/x86')
    opts.Add('KERNELDIR_X86', 'path to linux kernel source for X86, (use * for /usr/src/kernels/`uname -r`[-`uname -m`]:','*')

if 'arm' in BUILDS:
    opts.Add('OTHER_ARM',
             'Optional path to xerces-c and xmlrpc++ for ARM:',
             '$OTHER_PREFIX/arm')
    opts.Add('KERNELDIR_ARM', 'path to linux kernel source for ARM:',
             '/opt/arcom/src/linux-source-2.6.16.28-arcom1')

if 'armbe' in BUILDS:
    opts.Add('OTHER_ARMBE',
             'Optional path to xerces-c and xmlrpc++ for ARMBE:',
             '$OTHER_PREFIX/armbe')
    opts.Add('KERNELDIR_ARMBE', 'path to linux kernel source for ARMBE:',
             '/opt/arcom/src/linux-source-2.6.21.7-ael1')

opts.Update(env)
if env.has_key('PREFIX'):
    env['PREFIX'] = env.Dir(env['PREFIX']).get_abspath()
# Don't overwrite users config
# opts.Save('nidas.conf',env)

Help(opts.GenerateHelpText(env) + """
targets (use -c to clean targets)
(none) build linux modules for ARM, ARMBE, & X86, rtlinux modules for ARM, and ARM & X86 library and executables.
x86    build library and executable programs for X86.
arm    build linux and rtlinux driver modules, library and executable programs for ARM.
armbe  build linux driver modules, library and executable programs for ARMBE.
lib    build library for X86, ARM, and ARMBE.
x86_install  build and install X86 library, headers and executables.
arm_install  build and install ARM modules, library, headers and executables.
armbe_install  build and install ARMBE modules, library, headers and executables.
install build and install all modules, libraries, headers and executables.
-c install  clean targets from $PREFIX
""")

##
##  TODO - Check out missing files from source control.
##
##  scons will, by default, fetch files from SCCS or RCS subdirecto-
##  ries without explicit configuration.  This takes some extra pro-
##  cessing time to search for the necessary source code  management
##  files  on disk.  You can avoid these extra searches and speed up
##  your build a little by disabling these searches as follows:
##
env.SourceCode('.', None)
##
##  Store all signatures in the '.sconsign.dblite'
##  file at the top-level SConstruct directory.
##
SConsignFile()

##
##  Define compiler flags and paths for all builds.
##
# scons man page:
# CFLAGS
#   General  options  that  are  passed  to the C compiler
#   (C only; not C++).
# CCFLAGS
#   General options that are passed to the C and C++  compilers.
# CXXFLAGS
#   General  options that are passed to the C++ compiler.  By
#   default, this includes the value  of  $CCFLAGS,  so  that
#   setting  $CCFLAGS affects both C and C++ compilation.  If
#   you want to add C++-specific flags, you must set or over-
#   ride the value of $CXXFLAGS.
#
# Warning: CXXFLAGS is before CCFLAGS in the compiler arguments:
# print 'CXXCOM=' + str(env['CXXCOM'])
# CXXCOM=$CXX -o $TARGET -c $CXXFLAGS $CCFLAGS $_CCCOMCOM $SOURCES
#
# compiler string for building shareable code:
# print 'SHCXXCOM=' + str(env['SHCXXCOM'])
# SHCXXCOM=$SHCXX -o $TARGET -c $SHCXXFLAGS $SHCCFLAGS $_CCCOMCOM $SOURCES
#
# Because of the ordering, it isn't possible to add a CXX-only option
# at the end of the flags. Hence, don't put options in CCFLAGS that
# you may want to override for CXX.  For example:
# CCFLAGS='-Wall',  CXXFLAGS='-Wno-uninitialized', will result in
# -Wno-uninitialized -Wall, not the other way around.

# print 'CFLAGS=' + str(env['CFLAGS'])
# print 'CCFLAGS=' + str(env['CCFLAGS'])
# print 'SHCCFLAGS=' + str(env['SHCCFLAGS'])
# print 'CXXFLAGS=' + str(env['CXXFLAGS'])
# print 'SHCXXFLAGS=' + str(env['SHCXXFLAGS'])

# scons .98.1 (shipped with Fedora 8) doesn't propagate CXXFLAGS
# to SHCXXFLAGS.  This has been fixed in .98.3. The following
# lines can be removed after we have no more .98.1.
if env['SHCXXFLAGS'] != '$CXXFLAGS':
    env['SHCXXFLAGS'] = '$CXXFLAGS'

env['CFLAGS'] = [ '-Wall', '-O2' ]
env['CXXFLAGS'] = [ '-Wall', '-O2' ]

if env.has_key('XMLDEBUG') and env['XMLDEBUG']:
    env.AppendUnique(CPPDEFINES = ['XML_DEBUG'])

if env.has_key('DEBUG') and env['DEBUG']:
    env.AppendUnique(CPPDEFINES = ['DEBUG'])

if env.has_key('GDBDEBUG') and env['GDBDEBUG']:
    env.AppendUnique(CCFLAGS = ['-ggdb'])

##
##  Install firmware
##
SConscript("firmware/anythingIO/SConscript",exports={'env':env})

##
##  Install a2d filters
##
SConscript("../filters/SConscript",exports={'env':env})

##
##  Create the env for building to the x86 processor...
##
if 'x86' in BUILDS:
    print "Setting up for x86 builds..."
    x86_env = env.Clone(tools = ['kmake','packaging'],
	    ARCH = 'x86',
	    PREFIX = env['PREFIX'] + '/x86',
	    OTHER_PREFIX = env['OTHER_X86'])
    x86_env.AppendUnique(CCFLAGS = ["-g"])
    exports = {'env':x86_env}

    SConscript('nidas/SConscript',
               build_dir='build_x86',
               duplicate=0, exports=exports)
    # Alias('install','x86_install')
    Clean('x86','build_x86')      # Clean(target,files_or_dirs)

    # Testing targets, built and run only on x86
    SConscript("../tests/serial_sensor/SConscript",exports=exports)
    SConscript("../tests/tlogger/SConscript",exports=exports)
    SConscript("../tests/tiostream/SConscript",exports=exports)
    SConscript("../tests/network/SConscript",exports=exports)

    # initial attempt at using Package. Fails
    if 0:
        rpm = x86_env.Package( NAME           = 'nidas',
             VERSION        = '1.0',
             PACKAGEVERSION = 1,
             PACKAGETYPE    = 'rpm',
             PACKAGING_INSTALL_LOCATION = x86_env['PREFIX'],
             LICENSE        = 'gpl',
             SUMMARY        = 'balalalalal',
             DESCRIPTION    = 'this should be really really long',
             X_RPM_GROUP    = 'Application/fu',
             SOURCE_URL     = 'http://www.eol.ucar.edu/nidas-1.0.tar.gz'

        )
        Alias('rpm',rpm)


##
##  Create the env for cross-building to the xScale ARM processor
##  (little-endian) on the arcom Viper.
##
if 'arm' in BUILDS:
    print "Setting up for ARM builds..."
    arm_env = env.Clone(tools = ['armcross'],
	   ARCH = 'arm',
	   PREFIX = env['PREFIX'] + '/arm',
	   OTHER_PREFIX = env['OTHER_ARM'])
    # g++ version 3.4.4 often gives false positives when
    # trying to detect uninitialized variables.
    if re.search("^3",arm_env['CXXVERSION']):
        arm_env.AppendUnique(CXXFLAGS = '-Wno-uninitialized')

    arm_env.AppendUnique(CPPDEFINES = 'NIDAS_EMBEDDED')
    SConscript('nidas/SConscript',
               build_dir='build_arm',
               duplicate=0, exports={'env':arm_env})
    # Alias('install','arm_install')
    Clean('arm','build_arm')      # Clean(target,files_or_dirs)

##
##  Create the env for cross-building to the xScale ARM processor
##  (big-endian) on the arcom Vulcan.
##
if 'armbe' in BUILDS:
    print "Setting up for ARMBE builds..."
    armbe_env = env.Clone(tools = ['armbecross'],
	   ARCH = 'armbe',
	   PREFIX = env['PREFIX'] + '/armbe',
	   OTHER_PREFIX = env['OTHER_ARMBE'])
    armbe_env.AppendUnique(CPPDEFINES = 'NIDAS_EMBEDDED')

    if re.search("^3",armbe_env['CXXVERSION']):
        armbe_env.AppendUnique(CXXFLAGS = '-Wno-uninitialized')

    SConscript('nidas/SConscript',
               build_dir='build_armbe',
               duplicate=0, exports={'env':armbe_env})
    # Alias('install','armbe_install')
    Clean('armbe','build_armbe')      # Clean(target,files_or_dirs)

Default(BUILDS)

# Install the schema where it can be referenced globally on the system.
Alias('install',
      Alias('xml_install',
            env.Install('$PREFIX/share/xml','#../xml/nidas.xsd')))

dox = Command('#/../doc/doxygen/html/index.html',
              '#/../doc/doxygen_conf/nidas.doxy',
              'cd .. && doxygen $SOURCE')
Alias('dox', dox)
AlwaysBuild(dox)


