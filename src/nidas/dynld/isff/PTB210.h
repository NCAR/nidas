// -*- mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4; -*-
// vim: set shiftwidth=4 softtabstop=4 expandtab:
/*
 ********************************************************************
 ** NIDAS: NCAR In-situ Data Acquistion Software
 **
 ** 2014, Copyright University Corporation for Atmospheric Research
 **
 ** This program is free software; you can redistribute it and/or modify
 ** it under the terms of the GNU General Public License as published by
 ** the Free Software Foundation; either version 2 of the License, or
 ** (at your option) any later version.
 **
 ** This program is distributed in the hope that it will be useful,
 ** but WITHOUT ANY WARRANTY; without even the implied warranty of
 ** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ** GNU General Public License for more details.
 **
 ** The LICENSE.txt file accompanying this software contains
 ** a copy of the GNU General Public License. If it is not found,
 ** write to the Free Software Foundation, Inc.,
 ** 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 **
 ********************************************************************
*/

#ifndef NIDAS_DYNLD_ISFF_PTB_210_H
#define NIDAS_DYNLD_ISFF_PTB_210_H

#include <nidas/core/SerialSensor.h>

namespace n_c = nidas::core;

namespace nidas { namespace dynld { namespace isff {

// create table indices
enum PTB_COMMANDS
{   DEFAULT_SENSOR_INIT_CMD,
    SENSOR_RESET_CMD,
	SENSOR_SERIAL_BAUD_CMD,
	SENSOR_SERIAL_EVEN_WORD_CMD,
	SENSOR_SERIAL_ODD_WORD_CMD,
	SENSOR_SERIAL_NO_WORD_CMD,
	SENSOR_MEAS_RATE_CMD,
	SENSOR_NUM_SAMP_AVG_CMD,
	SENSOR_PRESS_MIN_CMD,
	SENSOR_PRESS_MAX_CMD,
	SENSOR_SINGLE_SAMP_CMD,
	SENSOR_START_CONT_SAMP_CMD,
	SENSOR_STOP_CONT_SAMP_CMD,
	SENSOR_POWER_DOWN_CMD,
	SENSOR_POWER_UP_CMD,
	SENSOR_SAMP_UNIT_CMD,
	SENSOR_INC_UNIT_CMD,
	SENSOR_CORRECTION_ON_CMD,
	SENSOR_CORRECTION_OFF_CMD,
    // No way to set the calibration points, so no need to set the Cal date.
    // SENSOR_SET_CAL_DATE_CMD,
	SENSOR_TERM_ON_CMD,
	SENSOR_TERM_OFF_CMD,
    NUM_SENSOR_CMDS
};

/**
 * Sensor class for the PTB210 barometer, built by Vaisala.
 * 
 * This subclass adds features to automatically set the serial port configuration 
 * to default values, or overridden values provided by the sensor XML definition as 
 * provided in the sensor, dsm or project catalogs.
 * 
 * If this class cannot communicate with the sensor, then it will modify the serial port
 * settings, such as baud rate, word length/parity/stop bits, as well as port type (RS232, 
 * RS422/485, or RS485 half duplex), until it can successfully communicate with the sensor.
 * 
 * This class also provides features to send to the sensor, configuration settings, including 
 * both serial port and science/measurement settings. 
 */
class PTB210: public nidas::core::SerialSensor
{
public:

    PTB210();

    ~PTB210();

    void validate() throw(nidas::util::InvalidParameterException);

    bool process(const nidas::core::Sample* samp,std::list<const nidas::core::Sample*>& results)
    	throw();

    // override open to provide the default settings to the DSM port, and search for the correct 
    // settings, should the default settings not result in successful communication.
    void open();

protected:
    void setDefaultPortConfig();
    void findWorkingSerialPortConfig();
    void sendSensorCmd(PTB_COMMANDS cmd, void* arg);

private:

    /**
     * In the validate() method the variables generated by this sensor class
     * are scanned, and if one matches "P" then its index, min and max values
     * are copied to these class members. The min, max limit checks for the P
     * variable are then removed (actually expanded to the limits for a float value),
     * so that the P variable is itself not overwritten with floatNAN if it exceeds
     * the limit checks.
     */
    unsigned int _PIndex;
    float _minP;
    float _maxP;

    static const char* DEFAULT_PORT_SERIAL_WORD_CONFIG;
    static int DEFAULT_PORT_SERIAL_BAUD_CONFIG;
    static n_c::PORT_TYPES DEFAULT_PORT_SERIAL_MODE_CONFIG;

    static const char* DEFAULT_SENSOR_INIT_CMD_STR;
    static const char* SENSOR_RESET_CMD_STR;
    static const char* SENSOR_SERIAL_BAUD_CMD_STR;
    static const char* SENSOR_SERIAL_EVENP_WORD_CMD_STR;
    static const char* SENSOR_SERIAL_ODDP_WORD_CMD_STR;
    static const char* SENSOR_SERIAL_NOP_WORD_CMD_STR;
    static const char* SENSOR_MEAS_RATE_CMD_STR;
    static const char* SENSOR_NUM_SAMP_AVG_CMD_STR;
    static const char* SENSOR_PRESS_MIN_CMD_STR;
    static const char* SENSOR_PRESS_MAX_CMD_STR;
    static const char* SENSOR_SINGLE_SAMP_CMD_STR;
    static const char* SENSOR_START_CONT_SAMP_CMD_STR;
    static const char* SENSOR_STOP_CONT_SAMP_CMD_STR;
    static const char* SENSOR_POWER_DOWN_CMD_STR;
    static const char* SENSOR_POWER_UP_CMD_STR;
    static const char* SENSOR_SAMP_UNIT_CMD_STR;
    static const char* SENSOR_EXC_UNIT_CMD_STR;
    static const char* SENSOR_INC_UNIT_CMD_STR;
    static const char* SENSOR_CORRECTION_ON_CMD_STR;
    static const char* SENSOR_CORRECTION_OFF_CMD_STR;
    // No way to set the calibration points, so no need to set the Cal date.
    // static const char* SENSOR_SET_CAL_DATE_CMD_STR;
    static const char* SENSOR_TERM_ON_CMD_STR;
    static const char* SENSOR_TERM_OFF_CMD_STR;
    static const char* SENSOR_GET_CONFIG_CMD_STR;

    // table to hold the strings for easy lookup
    static const char* cmdTable[NUM_SENSOR_CMDS];

    // NOTE: list sensor bauds from highest to lowest as the higher 
    //       ones are the most likely
    static const int NUM_SENSOR_BAUDS = 5;
    static const int SENSOR_BAUDS[NUM_SENSOR_BAUDS];

    char* workingSerialWordConfig;
    char* workingSerialBaudConfig;
    char* workingSerialPortModeConfig;

    // no copying
    PTB210(const PTB210& x);

    // no assignment
    PTB210& operator=(const PTB210& x);
};

}}}	// namespace nidas namespace dynld namespace isff

#endif
