// -*- mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4; -*-
// vim: set shiftwidth=4 softtabstop=4 expandtab:
/*
 ********************************************************************
 ** NIDAS: NCAR In-situ Data Acquistion Software
 **
 ** 2014, Copyright University Corporation for Atmospheric Research
 **
 ** This program is free software; you can redistribute it and/or modify
 ** it under the terms of the GNU General Public License as published by
 ** the Free Software Foundation; either version 2 of the License, or
 ** (at your option) any later version.
 **
 ** This program is distributed in the hope that it will be useful,
 ** but WITHOUT ANY WARRANTY; without even the implied warranty of
 ** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ** GNU General Public License for more details.
 **
 ** The LICENSE.txt file accompanying this software contains
 ** a copy of the GNU General Public License. If it is not found,
 ** write to the Free Software Foundation, Inc.,
 ** 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 **
 ********************************************************************
*/

#ifndef NIDAS_DYNLD_ISFF_LICOR7500_H
#define NIDAS_DYNLD_ISFF_LICOR7500_H

#include <nidas/core/SerialSensor.h>
#include <nidas/core/VariableConverter.h>

namespace nidas { namespace dynld { namespace isff {

/**
 * Sensor class for the Licor 7500 gas analyzer.
 * If the diagnostic value in a sample falls outside of the range
 * minValue, maxValue, then set the h2o and co2 output values to floatNAN.
 */
class Licor7500: public nidas::core::SerialSensor
{
public:

    Licor7500();

    ~Licor7500();

    void validate();

    bool process(const nidas::core::Sample* samp,std::list<const nidas::core::Sample*>& results);

private:

    /**
     * In the validate() method the variables generated by this sensor class
     * are scanned, and if one matches "diag" then its index, min and max values
     * are copied to these class members. The min, max limit checks for the diag
     * variable are then removed (actually expanded to the limits for a float value),
     * so that the diag variable is itself not overwritten with floatNAN if it exceeds
     * the limit checks, but the co2 and h2o values are.
     */
    unsigned int _diagIndex;

    unsigned int _pcellIndex;

    unsigned int _tcellIndex;

    unsigned int _co2Index;

    unsigned int _h2oIndex;

    float _minDiag;

    float _maxDiag;

    float _minPcell;

    float _maxPcell;

    float _minTcell;

    float _maxTcell;

    // no copying
    Licor7500(const Licor7500& x);

    // no assignment
    Licor7500& operator=(const Licor7500& x);


};

}}}	// namespace nidas namespace dynld namespace isff

#endif
