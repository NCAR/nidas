# -*- python -*-
## 2006, Copyright University Corporation for Atmospheric Research

import eol_scons.parseconfig as pc

Import('env')
arch = env['ARCH']  # empty string for native builds

sources = Split("""
    ATIK_Sonic.cc
    CSAT3_Sonic.cc
    CS_Krypton.cc
    CSI_CRX_Binary.cc
    CSI_IRGA_Sonic.cc
    CU_Coldwire.cc
    DAUSensor.cc
    GroundStation.cc
    Licor7500.cc
    metek.cc
    MOSMote.cc
    NCAR_TRH.cc
    PropVane.cc
    RebsLinear.cc
    SonicAnemometer.cc
    Wind2D.cc
    Wind3D.cc
    WindOrienter.cc
    WindRotator.cc
    WindTilter.cc
    WisardMote.cc
""")

headers = Split("""
    ATIK_Sonic.h
    CSAT3_Sonic.h
    CS_Krypton.h
    CSI_CRX_Binary.h
    CSI_IRGA_Sonic.h
    CU_Coldwire.h
    DAUSensor.h
    GroundStation.h
    Licor7500.h
    metek.h
    MOSMote.h
    NCAR_TRH.h
    PropVane.h
    RebsLinear.h
    SonicAnemometer.h
    Wind2D.h
    Wind3D.h
    WindOrienter.h
    WindRotator.h
    WindTilter.h
    WisardMote.h
""")

env.Append (LIBNIDAS_DYNLD_SOURCES = [ env.File(f) for f in sources ])

env.Install('$ARCHPREFIX/include/nidas/dynld/isff', headers)


# The NetcdfRPC classes have dependencies between each other, so they cannot
# be loaded individually as shared objects. It should work to put them into
# their own namespace with their own library, like nidas_dynld_ncrpc, so the
# nidas dynamic loader will find the shared library under the namespace name,
# but then all the configs have to change which load with the
# isff.NetcdfRPCOutput class name.  So instead, create two libraries, each
# with both modules in them.  First to get loaded will provide both
# dependencies.
ncrpcheaders = env.Split("""
    NetcdfRPCChannel.h
    NetcdfRPCOutput.h
""")

env.Install('$ARCHPREFIX/include/nidas/dynld/isff', ncrpcheaders)

instlibs = []
ncrpcchannel = env.SharedLibrary3("nidas_dynld_isff_NetcdfRPCOutput",
                                  ["NetcdfRPCChannel.cc", "NetcdfRPCOutput.cc"])
ncrpcoutput  = env.SharedLibrary3("nidas_dynld_isff_NetcdfRPCChannel",
                                  ["NetcdfRPCChannel.cc", "NetcdfRPCOutput.cc"])
instlibs = env.SharedLibrary3Install('$ARCHPREFIX', ncrpcchannel)
instlibs += env.SharedLibrary3Install('$ARCHPREFIX', ncrpcoutput)
env.Clean('install', instlibs)
