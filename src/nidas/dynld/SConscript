# -*- python -*-

##  Copyright 2005 UCAR, NCAR, All Rights Reserved

import glob
import fnmatch
import os

##
##  Import the cross-build environment.
##
Import('env')
myenv = env.Copy()

conf = Configure(myenv)

myenv = conf.Finish()

# -ggdb
# -DXML_DEBUG
myenv.AppendUnique(CXXFLAGS = Split("""
"""))

headers = [ Split("""
    AsciiOutput.h
    DSC_A2DSensor.h
    DSMSerialSensor.h
    FileSet.h
    FsMount.h
    GPS_NMEA_Serial.h
    RawSampleInputStream.h
    RawSampleOutputStream.h
    RawSampleService.h
    SampleArchiver.h
    SampleInputStream.h
    SampleOutputStream.h
    StatisticsCruncher.h
    StatisticsProcessor.h
    XMLConfigService.h
""") ]

rafhdrs = [ Split("""
    raf/A2DBoardTempSensor.h
    raf/ADC_HW_EB7022597.h
    raf/Aircraft.h
    raf/Arinc_IRS.h
    raf/DSMAnalogSensor.h
    raf/DSMArincSensor.h
    raf/GPS_HW_HG2021GB02.h
    raf/IRIGSensor.h
    raf/IRS_HW_HG2001GD.h
    raf/IRS_HW_YG1854.h
    raf/PSI9116_Sensor.h
    raf/SPP200_Serial.h
    raf/SyncRecordGenerator.h
    raf/SyncRecordReader.h
    raf/SyncRecordSource.h
    raf/SyncRecordVariable.h
""") ]

isffhdrs = [ Split("""
    isff/CSAT3_Sonic.h
    isff/CS_Krypton.h
    isff/GOES.h
    isff/GOESOutput.h
    isff/GOESProject.h
    isff/GOESXmtr.h
    isff/GroundStation.h
    isff/nc_server_rpc.h
    isff/NetcdfRPCChannel.h
    isff/NetcdfRPCOutput.h
    isff/Packets.h
    isff/PacketInputStream.h
    isff/PropVane.h
    isff/SE_GOESXmtr.h
    isff/SimGOESXmtr.h
    isff/SonicAnemometer.h
""") ]

##
##  source files in libnidas_dynld
##
sources = [ Split("""
    AsciiOutput.cc
    DSC_A2DSensor.cc
    DSMSerialSensor.cc
    FileSet.cc
    FsMount.cc
    GPS_NMEA_Serial.cc
    RawSampleInputStream.cc
    RawSampleOutputStream.cc
    RawSampleService.cc
    SampleArchiver.cc
    SampleInputStream.cc
    SampleOutputStream.cc
    StatisticsCruncher.cc
    StatisticsProcessor.cc
    XMLConfigService.cc
""") ]

rafsrcs = [ Split("""
    raf/A2DBoardTempSensor.cc
    raf/ADC_HW_EB7022597.cc
    raf/Aircraft.cc
    raf/Arinc_IRS.cc
    raf/DSMAnalogSensor.cc
    raf/DSMArincSensor.cc
    raf/GPS_HW_HG2021GB02.cc
    raf/IRIGSensor.cc
    raf/IRS_HW_HG2001GD.cc
    raf/IRS_HW_YG1854.cc
    raf/PSI9116_Sensor.cc
    raf/SPP200_Serial.cc
    raf/SyncRecordGenerator.cc
    raf/SyncRecordReader.cc
    raf/SyncRecordSource.cc
""") ]

isffsrcs = [ Split("""
    isff/CSAT3_Sonic.cc
    isff/CS_Krypton.cc
    isff/GOES.cc
    isff/GOESOutput.cc
    isff/GOESProject.cc
    isff/GOESXmtr.cc
    isff/GroundStation.cc
    isff/nc_server_rpc_xdr.c
    isff/NetcdfRPCChannel.cc
    isff/NetcdfRPCOutput.cc
    isff/Packets.cc
    isff/PacketInputStream.cc
    isff/PropVane.cc
    isff/SE_GOESXmtr.cc
    isff/SimGOESXmtr.cc
    isff/SonicAnemometer.cc

""") ]

# print(["sources="] + [str(h) for h in sources])

##
##  Build the nidas_dynld library.
##
lib = myenv.SharedLibrary('nidas_dynld' , [sources, rafsrcs, isffsrcs] )

##
## Install target for library.
##
myenv.Install('$PREFIX/lib',lib)

##
## Install target for headers.  Must look in parent of build directory
##
# headers = glob.glob("../*.h")
#
# Glob is too sophisticated. It incorporates results of Configure,
# and includes libpg-fe.h in its list.  Jeeeesh.
# headers = Glob("*.h")
# print(["headers="] + [str(h) for h in headers])

myenv.Install('$PREFIX/include/nidas/dynld',headers)
myenv.Install('$PREFIX/include/nidas/dynld/raf',rafhdrs)
myenv.Install('$PREFIX/include/nidas/dynld/isff',isffhdrs)
