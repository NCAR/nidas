# -*- python -*-

##  Copyright 2005 UCAR, NCAR, All Rights Reserved

##
##  Import the build environment.
##
Import('env')
env = env.Clone(tools = ['nidas'])
arch = env['ARCH']  # empty string for native builds

# -ggdb
# -DXML_DEBUG
# env.AppendUnique(CXXFLAGS = Split("""
# """))

SConscript(dirs = ["raf", "isff", "iss"], exports={'env':env})

headers = Split("""
    A2DSensor.h
    AsciiOutput.h
    Bzip2FileSet.h
    DSC_A2DSensor.h
    DSC_AnalogOut.h
    DSC_Event.h
    DSC_FreqCounter.h
    DSC_PulseCounter.h
    DSMSerialSensor.h
    FileSet.h
    GPS_NMEA_Serial.h
    GPS_Novatel_Serial.h
    IR104_Relays.h
    ParoSci_202BG_Calibration.h
    ParoSci_202BG_P.h
    ParoSci_202BG_T.h
    RawSampleInputStream.h
    RawSampleOutputStream.h
    RawSampleService.h
    SampleArchiver.h
    SampleInputStream.h
    SampleOutputStream.h
    SampleProcessor.h
    StatisticsCruncher.h
    StatisticsProcessor.h
    TSI_CPC3772.h
    UDPSampleOutput.h
    UDPSocketSensor.h
    ViperDIO.h
    WatchedFileSensor.h
    WxtSensor.h
    XMLConfigAllService.h
    XMLConfigService.h
""")

##
##  source files in libnidas_dynld
##
sources = Split("""
    A2DSensor.cc
    AsciiOutput.cc
    Bzip2FileSet.cc
    DSC_A2DSensor.cc
    DSC_AnalogOut.cc
    DSC_Event.cc
    DSC_FreqCounter.cc
    DSC_PulseCounter.cc
    DSMSerialSensor.cc
    FileSet.cc
    GPS_NMEA_Serial.cc
    GPS_Novatel_Serial.cc
    IR104_Relays.cc
    ParoSci_202BG_Calibration.cc
    ParoSci_202BG_P.cc
    ParoSci_202BG_T.cc
    RawSampleInputStream.cc
    RawSampleOutputStream.cc
    RawSampleService.cc
    SampleArchiver.cc
    SampleInputStream.cc
    SampleOutputStream.cc
    SampleProcessor.cc
    StatisticsCruncher.cc
    StatisticsProcessor.cc
    TSI_CPC3772.cc
    UDPSampleOutput.cc
    UDPSocketSensor.cc
    ViperDIO.cc
    WatchedFileSensor.cc
    WxtSensor.cc
    XMLConfigAllService.cc
    XMLConfigService.cc
""")

if arch == 'arm':
    archsources=Split("""
    """)
    archheaders=Split("""
    """)
else:
    archsources=Split("""
    """)
    archheaders=Split("""
    """)

SConscript(dirs="psql", duplicate=0, exports={'env':env})

##
##  Build the nidas_dynld library.
##
env.Append (LIBNIDAS_DYNLD_SOURCES = 
            [ env.File(f) for f in sources + archsources ])

# build libnidas_dynld.so
lib = env.SharedLibrary3('nidas_dynld' , env['LIBNIDAS_DYNLD_SOURCES'],
                         LIBS=['nidas'] + env['LIBS'])

# Export the locally built library 
Export({'LIBNIDAS_DYNLD' + arch: lib[0]})

##
## Install targets for library and headers.
##
nodes = []
nodes += env.SharedLibrary3Install('$PREFIX',lib)

if arch == '':
    nodes += env.Install('$PREFIX/include/nidas/dynld',headers + archheaders)

Alias('install',nodes)
Clean('install',nodes)
