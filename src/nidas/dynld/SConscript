# -*- python -*-
# 2006, Copyright University Corporation for Atmospheric Research

from SCons.Script import SConscript, Environment, Export

import eol_scons.parseconfig as pc

depends = ['libnidas']
env = Environment(tools=['default', 'symlink', 'sharedlibrary'])


def AddDynldSources(xenv, sources):
    env.Append(LIBNIDAS_DYNLD_SOURCES=[xenv.File(f) for f in sources])


def dynldsources(env):
    env.AddMethod(AddDynldSources)


Export('dynldsources')


env.Tool(dynldsources)
SConscript(dirs=["raf", "isff", "iss"])


headers = env.Split("""
    A2DSensor.h
    AsciiOutput.h
    Bzip2FileSet.h
    ChronyLog.h
    DSC_A2DSensor.h
    DSC_AnalogOut.h
    DSC_Event.h
    DSC_FreqCounter.h
    DSC_PulseCounter.h
    DSMSerialSensor.h
    FileSet.h
    GPS_NMEA_Serial.h
    GPS_Novatel_Serial.h
    IEEE_Float.h
    IR104_Relays.h
    ModbusRTU.h
    ParoSci_202BG_Calibration.h
    ParoSci_202BG_P.h
    ParoSci_202BG_T.h
    RawSampleInputStream.h
    RawSampleOutputStream.h
    RawSampleService.h
    SampleArchiver.h
    SampleInputStream.h
    SampleOutputStream.h
    SampleProcessor.h
    StatisticsCruncher.h
    StatisticsProcessor.h
    TSI_CPC3772.h
    UDPSampleOutput.h
    UDPSocketSensor.h
    Uio48Sensor.h
    ViperDIO.h
    WatchedFileSensor.h
    WxtSensor.h
    XMLConfigAllService.h
    XMLConfigService.h
""")

#
#  source files in libnidas_dynld
#
sources = env.Split("""
    A2DSensor.cc
    AsciiOutput.cc
    Bzip2FileSet.cc
    ChronyLog.cc
    DSC_A2DSensor.cc
    DSC_AnalogOut.cc
    DSC_Event.cc
    DSC_FreqCounter.cc
    DSC_PulseCounter.cc
    DSMSerialSensor.cc
    FileSet.cc
    GPS_NMEA_Serial.cc
    GPS_Novatel_Serial.cc
    IEEE_Float.cc
    IR104_Relays.cc
    ModbusRTU.cc
    ParoSci_202BG_Calibration.cc
    ParoSci_202BG_P.cc
    ParoSci_202BG_T.cc
    RawSampleInputStream.cc
    RawSampleOutputStream.cc
    RawSampleService.cc
    SampleArchiver.cc
    SampleInputStream.cc
    SampleOutputStream.cc
    SampleProcessor.cc
    StatisticsCruncher.cc
    StatisticsProcessor.cc
    TSI_CPC3772.cc
    UDPSampleOutput.cc
    UDPSocketSensor.cc
    Uio48Sensor.cc
    ViperDIO.cc
    WatchedFileSensor.cc
    WxtSensor.cc
    XMLConfigAllService.cc
    XMLConfigService.cc
""")

conf = env.NidasConfigure()

if pc.ParseConfig(conf.env, 'pkg-config --libs gsl'):
    conf.Define("HAVE_LIBGSL")
    env.PrintProgress("Checked for libgsl... yes")
else:
    env.PrintProgress("Checked for libgsl... no")

conf.CheckCHeader('sys/inotify.h')

# uio48.h is a header file with ioctl definitions for a UIO48
# digital I/O chip, as found on a PCM-C418 Vortex.
have_uio48 = False
if conf.CheckCHeader('uio48.h'):
    have_uio48 = True

conf.CheckLib('modbus')
env = conf.Finish()


# Provide a tool function which apps SConscript can use to check if UIO48 is
# enabled.
def uio48(env):
    env["HAVE_UIO48"] = have_uio48


Export('uio48')

#
#  Build the nidas_dynld library.
#
env.AddDynldSources(sources)
env.Require(depends)
lib = env.SharedLibrary3('$VARIANT_DIR/lib/nidas_dynld',
                         env['LIBNIDAS_DYNLD_SOURCES'])
env.Default([lib])

#
# Install targets for library and headers.
#
nodes = []
nodes += env.SharedLibrary3Install('$PREFIX', lib)
nodes += env.Install('$PREFIX/include/nidas/dynld', headers)

env.Alias('install', nodes)


def libnidas_dynld(env):
    env.Append(LIBS=[lib[0]])
    env.Require(depends)


Export('libnidas_dynld')
