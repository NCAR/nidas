# -*- python -*-

##  Copyright 2005 UCAR, NCAR, All Rights Reserved

import glob
import fnmatch
import os

##
##  Import the cross-build environment.
##
Import('env')
# env = env.Clone()
arch = env['ARCH']

# major and minor number of shareable library, libnidas_dynld.so.major.minor
major = '1'
minor = '0'

# -ggdb
# -DXML_DEBUG
# env.AppendUnique(CXXFLAGS = Split("""
# """))

SConscript(dirs = ["raf", "isff", "iss"], exports={'env':env})

headers = [ Split("""
    A2DSensor.h
    AsciiOutput.h
    Bzip2FileSet.h
    DSC_A2DSensor.h
    DSC_AnalogOut.h
    DSC_Event.h
    DSC_FreqCounter.h
    DSC_PulseCounter.h
    DSMSerialSensor.h
    FileSet.h
    GPS_NMEA_Serial.h
    ParoSci_202BG_Calibration.h
    ParoSci_202BG_P.h
    ParoSci_202BG_T.h
    RawSampleInputStream.h
    RawSampleOutputStream.h
    RawSampleService.h
    SampleArchiver.h
    SampleInputStream.h
    SampleOutputStream.h
    SampleProcessor.h
    StatisticsCruncher.h
    StatisticsProcessor.h
    TSI_CPC3772.h
    UDPSampleOutput.h
    ViperDIO.h
    XMLConfigService.h
""") ]

##
##  source files in libnidas_dynld
##
sources = [ Split("""
    A2DSensor.cc
    AsciiOutput.cc
    Bzip2FileSet.cc
    DSC_A2DSensor.cc
    DSC_AnalogOut.cc
    DSC_Event.cc
    DSC_FreqCounter.cc
    DSC_PulseCounter.cc
    DSMSerialSensor.cc
    GPS_NMEA_Serial.cc
    FileSet.cc
    ParoSci_202BG_Calibration.cc
    ParoSci_202BG_P.cc
    ParoSci_202BG_T.cc
    RawSampleInputStream.cc
    RawSampleOutputStream.cc
    RawSampleService.cc
    SampleArchiver.cc
    SampleInputStream.cc
    SampleOutputStream.cc
    SampleProcessor.cc
    StatisticsCruncher.cc
    StatisticsProcessor.cc
    TSI_CPC3772.cc
    UDPSampleOutput.cc
    ViperDIO.cc
    XMLConfigService.cc
""") ]

if arch == 'arm':
    archsources=Split("""
    """)
    archheaders=Split("""
    """)
else:
    archsources=Split("""
    """)
    archheaders=Split("""
    """)

SConscript(dirs="psql", duplicate=0, exports={'env':env})

##
##  Build the nidas_dynld library.
##
env.Append (LIBNIDAS_DYNLD_SOURCES = sources + archsources )

# libnidas_dynld.so
libname = env.subst('$SHLIBPREFIX') + 'nidas_dynld' + env.subst('$SHLIBSUFFIX')

# libnidas_dynld.so.major
soname = libname + '.' + major

# build libnidas_dynld.so.major.minor, adding '.major.minor' to SHLIBSUFFIX
lib = env.SharedLibrary('nidas_dynld' , env['LIBNIDAS_DYNLD_SOURCES'],
    LIBS=['nidas'] + env['LIBS'],
    LIBPATH = [env.Dir('../build_core')] + env['LIBPATH'],
    SHLIBSUFFIX=env.subst('$SHLIBSUFFIX') + '.' + major + '.' + minor,
    SHLINKFLAGS=[env["SHLINKFLAGS"] + ['-Wl,-soname=' + soname]])

# link libnidas_dynld.so.major.minor to libnidas_dynld.so
env.Command(libname,lib,'cd $TARGET.dir; ln -sf $SOURCE.file $TARGET.file')

# link libnidas_dynld.so.major.minor to libnidas_dynld.so.major
env.Command(soname,lib,'cd $TARGET.dir; ln -sf $SOURCE.file $TARGET.file')

##
## Install targets for library and headers.
##
nodes = []
nodes += env.Install('$PREFIX/lib',lib)
nodes += env.Command('$PREFIX/lib/' + libname,lib,'cd $TARGET.dir; ln -sf $SOURCE.file $TARGET.file')
nodes += env.Command('$PREFIX/lib/' + soname,lib,'cd $TARGET.dir; ln -sf $SOURCE.file $TARGET.file')
nodes += env.Install('$PREFIX/include/nidas/dynld',headers + archheaders)
Alias('install',nodes)

# print [ env.subst('$PREFIX/lib/') + os.path.basename(File(l).path) for l in lib]

# env.Clean(arch + '_install', [
#     ('$PREFIX/lib/' + os.path.basename(File(l).path) for l in lib)
#     ])
env.Clean('install', [
    ('$PREFIX/lib/' + os.path.basename(File(l).path) for l in [lib,libname,soname])
    ])

env['LIBNIDAS_DYNLD'] = libname
