# -*- python -*-

##  Copyright 2005 UCAR, NCAR, All Rights Reserved

import os
import glob
import kmake    # get_svnversion

##
##  Import the cross-build environment.
##

Import('env')
# Import('build_rtlinux_modules')
myenv = env.Copy()
arch = myenv['ARCH']

rtlgcc = '/opt/rtldk-2.2/bin/arm-linux-gcc'

##
##  RTLinux specific settings
##
myenv.Replace(CC = rtlgcc)

myenv.AppendUnique(CCFLAGS=[Split("""
      -DMODULE -D__RTCORE_KERNEL__
      -nostdinc
      -isystem /opt/rtldk-2.2/bin/../lib/gcc-lib/arm-linux/3.3.2/include/  
    """),
    '-DDSM_VERSION=' + kmake.get_svnversion(myenv)]
)

#    -Wa,-mcpu=xscale -mapcs -mapcs-32 -march=armv4 -mno-sched-prolog
#    -mshort-load-bytes -mtune=strongarm -Uarm -DDSM
#    -fno-omit-frame-pointer -fno-strict-aliasing

myenv.AppendUnique(CPPPATH=Split("""
  /opt/rtldk-2.2/rtlinuxpro/include/app/rtl
  /opt/rtldk-2.2/rtlinuxpro/linux/include
  /opt/rtldk-2.2/rtlinuxpro/include
  #nidas/rtlinux/CEI420A/Include
  #nidas/rtlinux/CEI420A/Source
"""))

##
##  List of each module source
##
modules = Split("""
    a2d_driver.c
    aio16_a2d.c
    arinc.c
    dsc_a2d.c
    dsm_serial.c
    dsm_serial_fifo.c
    ioctl_fifo.c
    lams.c
    mesa.c
    pc104sg.c
    rtl_isa_irq.c
""")

#       calramp.c
#       gainramp.c
#       testa2d.c
#       testa2davg.c
#       testa2dint.c
#       testa2drdid.c
#       testa2dfclr.c
#       testa2dfifo.c
#       testa2dtime.c
#       testa2dsel.c
#       testa2dstat.c
#       testa2dsync.c
#       testoffset.c


headers = Split("""
    a2d_driver.h
    aio16_a2d.h
    arinc.h
    dsc_a2d.h
    dsmlog.h
    dsm_serial_fifo.h
    dsm_serial.h
    dsm_version.h
    dsm_viper.h
    ioctl_fifo.h
    irigclock.h
    lams.h
    mesa.h
    pc104sg.h
    rtl_isa_irq.h
    win_com8.h
""")

myenv.Install('$PREFIX/include/nidas/rtlinux',headers)

## 
## Build the modules and install headers only if the RTLinux Development
## kit can be found.
## 
if os.path.exists(rtlgcc):
    objs = [ myenv.Object(i) for i in modules ]
    # print(["objs="] + [str(h) for h in objs])
    myenv.Install('$PREFIX/rtlinux',objs)
else:
    print "Skipping RTLinux builds: %s not found." % rtlgcc


subdirs=Split("""
    filters
""")

# if arch == 'arm' or arch == 'x86':
#     subdirs += Split("""filters""")

##
## ARCH target for creating modules, library, and executables
##
myenv.Alias(arch, ['build_%s' % dir for dir in subdirs])

# Provide an arch-specific install alias.  Basically, install everything
# that goes under the arch-specific install prefix.
archinstall= myenv.Alias(arch+'_install', [ '$PREFIX' ])

for dir in subdirs:
    myenv.SConscript('%s/SConscript' % dir,
               build_dir='build_%s' % dir,
               duplicate=0,exports={'env':myenv})

myenv.Default([ "build_%s" % dir for dir in subdirs ])

