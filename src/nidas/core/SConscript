# -*- python -*-

##  Copyright 2005 UCAR, NCAR, All Rights Reserved

import glob
import fnmatch
import os
import localutils


##
##  Import the cross-build environment.
##
Import('env')
myenv = env.Clone()
arch = myenv['ARCH']

# conf = Configure(myenv)
# myenv = conf.Finish()

def write_version_cc(env,target,source):
    """
    Write Version.cc file containing the contents of source.
    """
    out = open(target[0].path, "w")
    out.write('#include <nidas/core/Version.h>\n')
    out.write('const char* nidas::core::Version::version="' +
    	source[0].get_contents() + '";\n')
    out.close()

myenv.Command("Version.cc",[Value(localutils.get_svnversion(myenv))],write_version_cc)

# -ggdb
# -DXML_DEBUG
myenv.AppendUnique(CXXFLAGS = Split("""
"""))

myenv.CXXFile(target='AsciiSscanf.cc',source='AsciiSscanf.ll')

##
##  List of headers files
##
# headers = glob.glob("../../util/*.h")
# print(["glob headers="] + [str(h) for h in headers])
headers = Split("""
    AdaptiveDespiker.h
    AsciiSscanf.h
    CalFile.h
    CharacterSensor.h
    ConnectionRequester.h
    Datagrams.h
    DerivedDataClient.h
    DerivedDataReader.h
    DOMable.h
    DOMObjectFactory.h
    DSMCatalog.h
    DSMConfig.h
    DSMEngine.h
    DSMEngineIntf.h
    DSMSensor.h
    DSMServer.h
    DSMServerIntf.h
    DSMService.h
    DSMTime.h
    DynamicLoader.h
    HeaderSource.h
    IOChannel.h
    IODevice.h
    IOStream.h
    LooperClient.h
    Looper.h
    McSocket.h
    NearestResampler.h
    NearestResamplerAtRate.h
    NidsIterators.h
    Parameter.h
    PhysConstants.h
    PortSelectorTest.h
    Project.h
    ProjectConfigs.h
    RemoteSerialConnection.h
    RemoteSerialListener.h
    Resampler.h
    RTL_DevIoctl.h
    RTL_DevIoctlStore.h
    RTL_IODevice.h
    SampleAverager.h
    SampleClient.h
    SampleClientList.h
    SampleClock.h
    Sample.h
    SampleInput.h
    SampleInputHeader.h
    SampleIOProcessor.h
    SampleLengthException.h
    SampleOutput.h
    SampleParseException.h
    SamplePool.h
    SampleScanner.h
    SampleSorter.h
    SampleSource.h
    SampleTag.h
    SensorCatalog.h
    SensorHandler.h
    SensorOpener.h
    ServiceCatalog.h
    Site.h
    Socket.h
    SocketIODevice.h
    TCPSocketIODevice.h
    UDPSocketIODevice.h
    ServerSocketIODevice.h
    SortedSampleSet.h
    StatusHandler.h
    StatusListener.h
    StatusThread.h
    TestSampleClient.h
    UnixIOChannel.h
    UnixIODevice.h
    VariableConverter.h
    Variable.h
    Version.h
    XDOM.h
    XMLConfigInput.h
    XMLConfigWriter.h
    XMLException.h
    XMLFdBinInputStream.h
    XMLFdFormatTarget.h
    XMLFdInputSource.h
    XMLParser.h
    XMLWriter.h
    XmlRpcThread.h
    XMLStringConverter.h
""")

# print(["headers="] + [str(h) for h in headers])

sources = Split("""
    AdaptiveDespiker.cc
    AsciiSscanf.cc
    CalFile.cc
    CharacterSensor.cc
    ConnectionRequester.cc
    DerivedDataReader.cc
    DOMable.cc
    DOMObjectFactory.cc
    DSMCatalog.cc
    DSMConfig.cc
    DSMEngine.cc
    DSMEngineIntf.cc
    DSMSensor.cc
    DSMServer.cc
    DSMServerIntf.cc
    DSMService.cc
    HeaderSource.cc
    IOChannel.cc
    IOStream.cc
    Looper.cc
    McSocket.cc
    NearestResampler.cc
    NearestResamplerAtRate.cc
    NidsIterators.cc
    Parameter.cc
    PortSelectorTest.cc
    Project.cc
    ProjectConfigs.cc
    RemoteSerialConnection.cc
    RemoteSerialListener.cc
    RTL_DevIoctl.cc
    RTL_DevIoctlStore.cc
    RTL_IODevice.cc
    SampleAverager.cc
    Sample.cc
    SampleClientList.cc
    SampleClock.cc
    SampleInput.cc
    SampleInputHeader.cc
    SampleIOProcessor.cc
    SampleOutput.cc
    SamplePool.cc
    SampleScanner.cc
    SampleSorter.cc
    SampleSource.cc
    SampleTag.cc
    SensorCatalog.cc
    SensorHandler.cc
    SensorOpener.cc
    ServiceCatalog.cc
    Site.cc
    Socket.cc
    SocketIODevice.cc
    TCPSocketIODevice.cc
    UDPSocketIODevice.cc
    ServerSocketIODevice.cc
    StatusHandler.cc
    StatusListener.cc
    StatusThread.cc
    TestSampleClient.cc
    Variable.cc
    VariableConverter.cc
    Version.cc
    XMLConfigWriter.cc
    XMLException.cc
    XMLFdFormatTarget.cc
    XMLParser.cc
    XMLWriter.cc
    XmlRpcThread.cc
""")

# r"xxx" is a raw string, escape sequences are left alone
dynlddef = r"NIDAS_DYNLD_LIBRARY_PATH=\"$PREFIX/lib\""

# dyn_sources = [ sources, myenv.SharedObject("DynamicLoader.cc", CPPDEFINES=dynlddef) ]
dyn_objs = [ myenv.SharedObject(sources), myenv.SharedObject("DynamicLoader.cc", CPPDEFINES=dynlddef) ]

##
##  Build the libnidas library.  Include the util objects directly.
##
lib = myenv.SharedLibrary('nidas' , [ dyn_objs ] + env['NIDAS_UTIL_OBJECTS'],LIBS=[])

##
## Install targets for libraries and headers.
##
myenv.Install('$PREFIX/lib',lib)
myenv.Install('$PREFIX/include/nidas/core',headers)

# print [ myenv.subst('$PREFIX/lib/') + os.path.basename(File(l).path) for l in lib]

myenv.Clean(arch + '_install', [
    ('$PREFIX/lib/' + os.path.basename(File(l).path) for l in lib)
    ])
