# -*- python -*-
# 2004, Copyright University Corporation for Atmospheric Research

# This SConscript can be run two ways.  Normally it is part of a full build
# of the NIDAS source tree, using variant dirs to build into different
# paths for each machine architecture, and inheriting configuration
# settings and paths from the top-level SConstruct.  The other way builds
# the applications against an existing installation of NIDAS, by specifying
# the installation path in the NIDAS_PATH variable on the scons
# command-line and by running scons with this SConscript as the SConstruct
# file.  So the standalone build command looks like this:
#
#   scons -f SConscript NIDAS_PATH=/opt/nidas
#
# The top few lines of this file setup the Environment accordingly, while
# the rest of the file does not need to change.

import os
import eol_scons
import eol_scons.parseconfig as pc

from SCons.Script import Environment, Import, ARGUMENTS, Split


def check_pkg_config(env, pkg):
    found = pc.ParseConfig(env, 'pkg-config %s --libs --cflags' % (pkg))
    env.PrintProgress("pkg-config found for %s: %s" %
                      (pkg, ["no", "yes"][int(found)]))
    return found


def target(prog):
    "Create target path for a program by inserting variant bin dir."
    return '$VARIANT_DIR/bin/' + os.path.basename(prog)


if not ARGUMENTS.get('NIDAS_PATH'):
    #
    #  Import the build environment.
    #
    Import('env')
    env = env.Clone(tools=['nidas'])
    arch = env['ARCH']  # empty string for native builds
    mach = env.get('MACH')
else:
    env = Environment(tools=['default', 'nidas'])
    # We do this here because we don't get the setting from the top-level
    # SConstruct.
    pc.PassPkgConfigPath(env)
    arch = 'host'
    mach = 'host'
    # If this path exists, then probably we're building on a Pi and it
    # needs to be on the path.
    xlibs = env.subst("${NIDAS_PATH}/lib/arm-linux-gnueabihf")
    if os.path.exists(xlibs):
        env.Append(LIBPATH=xlibs)

# Add jsoncpp to the environment for all now that a few apps use it.
jsoncpp_enabled = (arch != 'armbe') and check_pkg_config(env, 'jsoncpp')
if jsoncpp_enabled:
    env.PrintProgress("jsoncpp enabled for data_stats and sync_dump.")
    env.AppendUnique(CPPDEFINES=['NIDAS_JSONCPP_ENABLED=1'])
else:
    env.PrintProgress("jsoncpp not enabled.")
    env.AppendUnique(CPPDEFINES=['NIDAS_JSONCPP_ENABLED=0'])

programs = Split("""
arl-ingest
raf/arinc_out
ck_aout
ck_calfile
ck_xml
data_dump
data_stats
dmd_mmat_vin_limit_test
dsc_a2d_ck
dsm_server
dsm
raf/extract2d
raf/extractDMT
ir104
lidar_vel
merge_verify
nidas_udp_relay/nidas_udp_relay
nidsmerge
n_hdr_util
proj_configs
rserial
sensor_extract
sensor_sim
statsproc
status_listener
sync_dump
sync_server
test_irig
xml_dump
isff/datasets
""")

env.Tool('nidasconfig')
conf = env.NidasConfigure()
# tee_tty requires timepps.
conf.CheckCHeader(['time.h', 'sys/timepps.h'])
# tee_i2c requires i2c-dev
# linux/i2c-dev.h exists on RedHat systems, but does not contain
# macros such as i2c_smbus_read_byte_data
conf.CheckCHeader('linux/i2c-dev.h')
env = conf.Finish()

utilenv = env.Clone()
env.Tool('nidasdynld')

for prog in programs:
    prog = env.NidasProgram(target(prog), prog+'.cc')
    env.Alias(prog[0].name, prog)

didbenv = env.Clone()
dbconf = didbenv.Configure()
if bool(arch == 'host' and jsoncpp_enabled and
        check_pkg_config(didbenv, 'libcurl')):
    env.PrintProgress("C++11, jsoncpp, and libcurl found, "
                      "building data_influxdb.")
    didbenv.Append(CCFLAGS='-Wno-effc++')
    didb = didbenv.NidasProgram(target('data_influxdb'), 'data_influxdb.cc')
    didbenv.Alias('data_influxdb', didb)
dbconf.Finish()

sdconf = env.Configure()

# check for existence of i2c_smbus_read_byte, typically a macro in
# linux/i2c-dev.h
has_i2c = False
if sdconf.CheckFunc('i2c_smbus_read_byte', '#include <linux/i2c-dev.h>', 'C'):
    has_i2c = True
    # check if i2c API has 3(old) or 4(new) arguments in
    # i2c_smbus_read_i2c_block_data
    if not sdconf.CheckLibWithHeader('', 'linux/i2c-dev.h', 'C',
            'i2c_smbus_read_i2c_block_data(0,0,0,0);'):
        env.Append(CPPDEFINES="OLD_I2C_API")
sdconf.Finish()

env.NidasProgram(target('prep'), 'isff/prep.cc')

# Programs which only use libnidas_util.so, not libnidas.
utilenv.NidasUtilProgram(target('sing'), 'sing.cc')
utilenv.NidasUtilProgram(target('tee_tty'), 'tee_tty.cc')

# Only build uio48 if it was enabled for the dynld library.
env.Tool('uio48')
if env.get('HAVE_UIO48'):
    env.NidasProgram(target('uio48'), 'uio48.cc')

# tee_i2c has a read-from-text-file test mode which doesn't
# require the I2C API, so always build it
env.NidasProgram(target('tee_i2c'), 'tee_i2c.cc')

# ublox requires the I2C API
if has_i2c:
    env.Alias('ublox', utilenv.NidasUtilProgram(target('ublox'), 'ublox.cc'))

utilenv.NidasUtilProgram(target('utime'), 'utime.cc')

if mach == 'viper':
    # controls DIO pins on a Viper
    env.NidasProgram(target('viper_dio'), 'viper_dio.cc')

if arch != 'host':
    # Programs which just do ioctls to NIDAS driver modules, and don't
    # otherwise use anything in the nidas libraries.
    utils = ['set_pcmcom8.c', 'serial_loopback_test.c',
             'isff/set_emerald.c', 'isff/emerald_dio.cc',
             'gps_nmea_sysclock.cc', 'garmin.cc']
    for prog in utils:
        utilenv.NidasUtilProgram(target(prog), prog+'.cc')

env.Alias('install', ['${INSTALL_ROOT}$PREFIX/bin'])

env.Default([target('.')])
