# -*- python -*-
## 2004, Copyright University Corporation for Atmospheric Research

# This SConscript can be run two ways.  Normally it is part of a full build
# of the NIDAS source tree, using variant dirs to build into different
# paths for each machine architecture, and inheriting configuration
# settings and paths from the top-level SConstruct.  The other way builds
# the applications against an existing installation of NIDAS, by specifying
# the installation path in the NIDAS_PATH variable on the scons
# command-line and by running scons with this SConscript as the SConstruct
# file.  So the standalone build command looks like this:
#
#   scons -f SConscript NIDAS_PATH=/opt/nidas
#
# The top few lines of this file setup the Environment accordingly, while
# the rest of the file does not need to change.

import eol_scons
import eol_scons.parseconfig as pc

def check_pkg_config(env, pkg):
    found = pc.ParseConfig(env, 'pkg-config %s --libs --cflags' % (pkg))
    print("pkg-config found for %s: %s" % (pkg, ["no", "yes"][int(found)]))
    return found

cpp11_source = """
#include <string>  //for converting data to_string
#include <future> //async function calls

int main(int argc, char** argv) {
std::string one = std::to_string(1);
return 0;
}
"""
def CheckCpp11(context):
    context.env.Append(CXXFLAGS='-std=c++11')
    context.Message('Checking for C++11 support...')
    result = context.TryCompile(cpp11_source, '.cc')
    context.Result(result)
    return result
 
custom_tests = {'CheckCpp11':CheckCpp11}


if not ARGUMENTS.get('NIDAS_PATH'):
    ##
    ##  Import the build environment.
    ##
    Import('env')
    env = env.Clone(tools = ['nidas'])
    arch = env['ARCH']  # empty string for native builds
    machs = env['MACHS']
else:
    env = Environment(tools=['default', 'nidas'])
    # We do this here because we don't get the setting from the top-level
    # SConstruct.
    pc.PassPkgConfigPath(env)
    arch = ''
    machs = []

programs = Split("""
arl-ingest
arinc_out
ck_aout
ck_calfile
ck_xml
data_dump
data_stats
dmd_mmat_test
dsm_server
dsm
extract2d
extractDMT
ir104
lidar_vel
merge_verify
nidas_udp_relay
nidsmerge
n_hdr_util
proj_configs
rserial
sensor_extract
sensor_sim
statsproc
status_listener
sync_server
xml_dump
isff/datasets
""")

for prog in programs:
    env.Alias(prog, env.NidasProgram(prog+'.cc'))

didbenv = env.Clone()
dbconf = didbenv.Configure(custom_tests=custom_tests)
if not dbconf.CheckCpp11():
    print("No C++11 support, data_influxdb will not be built.")
elif bool(not arch and
          check_pkg_config(didbenv, 'jsoncpp') and
          check_pkg_config(didbenv, 'libcurl')):
    print("C++11, jsoncpp, and libcurl found, building data_influxdb.")
    didbenv.AppendUnique(CXXFLAGS='-std=c++11')
    didbenv.Append(CXXFLAGS='-Wno-effc++')
    didb = didbenv.NidasProgram('data_influxdb.cc')
    didbenv.Alias('data_influxdb', didb)
dbconf.Finish()

sdenv = env.Clone()
SDSRCS = ['sync_dump.cc']
sdconf = sdenv.Configure()
if not arch and check_pkg_config(sdenv, 'jsoncpp'):
    print("sync_dump will be built with json support")
    sdenv.Append(CPPDEFINES="SYNC_RECORD_JSON_OUTPUT")
else:
    print("sync_dump will be built without json support")

# linux/i2c-dev.h contains only macros, no library needed.
# It exists on RedHat systems, but does not contain
# macros such as i2c_smbus_read_byte_data
has_i2c = False
if sdconf.CheckLibWithHeader('','linux/i2c-dev.h','C',
        'i2c_smbus_read_byte_data(0,0);'):
    has_i2c = True
    has_old_i2c = False
# check if i2c API has 3(old) or 4(new) arguments in
# i2c_smbus_read_i2c_block_data
    if not sdconf.CheckLibWithHeader('','linux/i2c-dev.h','C',
            'i2c_smbus_read_i2c_block_data(0,0,0,0);'):
        env.Append(CPPDEFINES="OLD_I2C_API")

sdenv = sdconf.Finish()
sdenv.Append(CPPFLAGS='-Wno-effc++')
env.Alias('sync_dump', sdenv.NidasProgram(SDSRCS))

ncenv = env.Clone()
try:
    if pc.CheckConfig(env, 'pkg-config nc_server'):
        ncenv.MergeFlags('!pkg-config --cflags nc_server')
except OSerror:
    pass

ncenv.NidasProgram('isff/prep.cc')

# Programs which only use libnidas_util.so, not libnidas.
env.NidasUtilProgram('sing.cc')
env.NidasUtilProgram('tee_tty.cc')
if has_i2c:
    env.NidasUtilProgram('tee_i2c.cc')
    env.NidasUtilProgram('ublox.cc')

env.NidasUtilProgram('utime.cc')

if 'viper' in machs:
    # controls DIO pins on a Viper
    env.NidasProgram('viper_dio.cc')

if arch != '':
    # Programs which just do ioctls to NIDAS driver modules, and don't
    # otherwise use anything in the nidas libraries.
    env.NidasPlainProgram('set_pcmcom8.c')
    env.NidasPlainProgram('isff/set_emerald.c')
    env.NidasPlainProgram('isff/emerald_dio.cc')

    # nidas_util
    env.NidasUtilProgram('gps_nmea_sysclock.cc')
    env.NidasUtilProgram('garmin.cc')

# build auto_cal and config
if not env.has_key("BUILD_RAF") or env['BUILD_RAF']:
    SConscript("auto_cal/SConscript", exports=['env'])
    SConscript("config/SConscript", exports=['env'])

env.Alias('install', ['$PREFIX/bin'])
