# -*- python -*-
# 2006, Copyright University Corporation for Atmospheric Research

import os
from pathlib import Path

import SCons
from SCons.Script import Environment

env = Environment(tools=['default'], toolpath=["#/tools"])

headers = env.Split("""
    a2d.h
    isa_bus.h
    irigclock.h
    klog.h
    mesa.h
    ncar_a2d.h
    short_filters.h
    types.h
    util.h
""")

subdirs = env.Split("""
    arinc
    diamond
    filters
    irig
    lams
    mesa
    ncar_a2d
    serial
    viper
    usbtwod
    util
""")


# Create a Revision header specifically for the kernel modules to include.
# Like for nidas/Revision.h, this is not built into the variant dir.
info = env.GitInfo("#/nidas/linux/Revision.h", "#/nidas/linux")
env.Alias('install', env.Install('$PREFIX/include/nidas/linux', info))


symvers = {
    'revinfo': info[0],
    'util': env.File('util/Module.symvers'),
    'filters': env.File('filters/Module.symvers'),
    'irig': env.File('irig/Module.symvers')
}


def SymbolModules(env: Environment, *keys):
    "Translate a list of subdirs into the corresponding symbol files."
    return [symvers[k] for k in keys]


def NidasKernelModule(env, modules, sources, headers=None):
    """
    Pseudo-builder for NIDAS kernel modules, where the module names are in
    list @p modules.  Return the module targets if build enabled, else None.

    @p sources are the source paths relative to the module directory.

    @p headers are added to sources and also installed into the nidas/linux
    include directory.

    Makefile is added to sources if not present.  The Makefile must be listed
    in the source dependencies so that it is copied/linked to the variant_dir.
    The Kmake builder runs the make command in variant_dir.

    This pseudo-builder should work with variant builds with or without
    duplicate enabled, because it explicitly creates builders to link all the
    source files, including the Makefile, into the build directory.  The
    kernel make command expects to find the source files in the build
    directory.
    """
    targets = None
    # paths to the source and the variant build dir, relative to root
    thisdir = env.Dir('.').srcnode().path
    builddir = env.Dir('.').path
    env.LogDebug("NidasKernelModule: setup %s to build in %s..." %
                 (thisdir, builddir))
    subdir = os.path.basename(thisdir)

    # create a complete list of source files, everything needed in the build
    # directory to make the kernel module
    sources += headers or []
    if 'Makefile' not in sources:
        sources += ['Makefile']

    # If Linux modules are enabled, then try to build them, which means
    # failing if KERNELDIR is not set.
    exists = False
    if env.LinuxModulesEnabled():
        if not env.get("KERNELDIR"):
            msg = "Linux modules enabled but KERNELDIR not set."
            raise SCons.Errors.StopError(msg)

        linkpaths = []
        # Make sure all the source files exist, otherwise the module is
        # presumed to be a git submodule which has not been populated and
        # cannot be built.
        for sourcepath in sources:
            # root-relative path to the source file:
            source = env.File(sourcepath).srcnode().path
            if not source.startswith(thisdir):
                env.LogDebug("skipping %s: not in %s" % (source, thisdir))
                continue
            # need to check absolute path since cwd is the builddir when the
            # SConscript file is being executed.
            exists = os.path.exists(env.Dir('#').File(source).abspath)
            if exists:
                env.LogDebug(f"{subdir} kernel module source "
                             f"file found: {source}")
                linkpaths.append(sourcepath)
            else:
                print(f"{subdir} kernel module will not be built, "
                      f"source file missing: {source}")
                break

    if exists:
        # In case of variant build dirs without duplicate enabled, explicitly
        # create symbolic links back to the source directory.  Not sure if
        # kernel makes could be made to work with VPATH.
        for sourcepath in linkpaths:
            source = env.File(sourcepath).srcnode()
            # Build the paths for creating a symbolic link relative to the
            # root directory where builders execute.
            target = env.File(sourcepath)
            targetdir = Path(target.path).parent
            env.LogDebug("relpath(%s, %s" % (source.path, targetdir))
            relpath = os.path.relpath(source.path, targetdir)
            cmd = f"mkdir -p {targetdir}"
            cmd += f" && ln -sf {relpath} {target.path}"
            # No need to link the same path to itself, as would happen if
            # variant dirs were not in use.  samefile() must stat the file,
            # but the file may not exist yet, so rely on path equality.
            if target.path == source.path:
                env.LogDebug("skipping link between same files: "
                             "target=%s, source=%s" %
                             (target.path, source.path))
                continue
            env.LogDebug("creating builder: %s" % (cmd))
            # the built targets are the symbolic links in the variant build
            # dir, and they have the same path as the sources which are passed
            # to Kmake(), so SCons will figure out the dependency without
            # passing the targets to Kmake().
            env.Command(target, source, cmd)

        targets = env.Kmake(modules, sources)
        installs = env.Install('$LINUX_MODULES_INST_PATH', modules)
        env.Alias('install.root', installs)
        # This should be unnecessary now that modules can be installed
        # directly into the system modules path, but package specs still
        # refer to them and maybe they are useful to have in the tree for
        # other reasons.  I think rpms in particular expect the modules in
        # this directory and not in the system path.
        env.Alias('install', env.Install('$PREFIX/modules', modules))

    # Not sure if headers are meant to be installed even when the module
    # is not being built...
    if headers:
        installs = env.Install('$LINUX_MODULES_INC/' + subdir, headers)
        env.Alias('install', installs)

    return targets


def InstallModuleConf(env: Environment, modconf):
    "Pseudo-builder to install modprobe.d conf files."
    if env.LinuxModulesEnabled():
        conf = env.Install('$SYSCONFIGDIR/modprobe.d', modconf)
        env.Alias('install.root', conf)


def InstallEtcDefaults(env: Environment, target, source):
    "Pseudo-builder to install /etc/default files for modules."
    if env.LinuxModulesEnabled():
        conf = env.InstallAs('$SYSCONFIGDIR/default/'+target, source)
        env.Alias('install.root', conf)


def InstallModuleInit(env: Environment, target, source):
    "Pseudo-builder to install init scripts."
    if env.LinuxModulesEnabled():
        init = env.InstallAs('$SYSCONFIGDIR/init.d/'+target, source)
        env.Alias('install.root', init)


def nidas_kernel_modules(env: Environment):
    "Tool to add the ModuleSymbols method to an Environment."
    env.AddMethod(SymbolModules)
    env.AddMethod(NidasKernelModule)
    env.AddMethod(InstallModuleConf)
    env.AddMethod(InstallEtcDefaults)
    env.AddMethod(InstallModuleInit)


#
# Invoke SConscripts in subdirs to create linux modules.
#

# First apply the kerneldir tool to set KERNELDIR from the SCons variable
# based on ARCH and MACH.  That allows a different default KERNELDIR to be
# chosed for different targets, but the default can be overridden for each
# target by setting the target-specific variable.  The kmake tool then
# examines the build system to determine a default kernel directory abd
# assigns that to KERNELDIR_FOUND.  In the end, if KERNELDIR evaluates to
# non-empty, then it should be a path to the kernel source.  After both
# kerneldir and kmake are applied, then KERNELRELEASE is derived by the
# kerneldir tool.

env.Require(['kerneldir', 'kmake', nidas_kernel_modules])
env.SetKernelRelease()

# kernel module builds need absolute include paths because they are run in
# a different working directory
incpaths = set([env.Dir(p).abspath for p in env['CPPPATH']])
kflags = ' '.join(['-I%s' % (p) for p in incpaths])
env['KCFLAGS'] = kflags

# kernel modules install into a kernel-specific path.
env['LINUX_MODULES_INST_PATH'] = '/lib/modules/$KERNELRELEASE/nidas'
env['LINUX_MODULES_INC'] = '$PREFIX/include/nidas/linux'


# The environment does not need to be cloned for each module, since the
# construction variables are all the same for each module.  They also do not
# need to be variants with duplicate=1, because that is done once at the top
# for the entire variant target.

for subdir in subdirs:
    env.SConscript(f'{subdir}/SConscript', exports=[{'env': env}])

env.Alias('install', env.Install('$LINUX_MODULES_INC', headers))

env.InstallModuleConf('nidas.conf')

# The 99-nidas.rules file sets permissions on nidas module devices, so do not
# install it if modules not enabled.  Install into /lib/udev/rules.d because
# that's where we think packages are supposed to install their rules, then
# they can be overridden as needed on a particular system in
# /etc/udev/rules.d.
if env.LinuxModulesEnabled():
    rules = env.Install('/lib/udev/rules.d', 'udev/99-nidas.rules')
    env.Alias('install.root', rules)
