# -*- python -*-
## 2006, Copyright University Corporation for Atmospheric Research


##
##  Import the build environment.
##
Import('env')
arch = env['ARCH']  # empty string for native builds
machs = env['MACHS']

headers = Split("""
    a2d.h
    isa_bus.h
    irigclock.h
    klog.h
    mesa.h
    ncar_a2d.h
    types.h
    util.h
""")

subdirs=Split("""
    arinc
    diamond
    filters
    irig
    lams
    mesa
    ncar_a2d
    serial
    viper
    usbtwod
    util
""")

#
# Invoke SConscripts in subdirs to create linux modules.
#
# A SConscript may be invoked more than once, to build
# modules for multiple machines of an architecture.
# Pass a boolean variable 'first_mach' to the SConscript,
# with a value of True the first time the SConscript is
# called for a given architecture, and False for successive times.
# Then the first time is it called, a SConscript can then
# create dependencies for things that are independent
# of machine type for an architecture. This then avoids warnings:
# "warning: Two different environments were specified for target ..."

first_mach = True
vdirs = []
for mach in machs:

    if not env.has_key("LINUX_MODULES") or env['LINUX_MODULES']:
        # If LINUX_MODULES is undefined, or is True, then the
        # user wants to build the linux modules. If so,
        # redefine it to be where the modules are to be installed.
        #
        # module installation path must be unique for each machine type
        # For the native host, mach is a null string, and
        # modpath is then simply $PREFIX/modules

        # Look for 'KERNELDIR_' + mach + '_' + arch.
        # If not found, look for KERNELDIR.
        kdir = ''
        kkey = 'KERNELDIR_' + mach + '_' + arch
        if env.has_key(kkey):
            kdir = env[kkey]
        else:
            kkey = 'KERNELDIR'
            if env.has_key(kkey):
                kdir = env[kkey]

        modpath='$PREFIX/modules/' + mach

# Need the absolute paths to the local header files when build modules
# Dir('.').path is the current variant_dir, such as "build_arm/linux"
# Dir('./../include').path will then be build_arm/include
# Dir('./../include').abspath will be the absolute path

        kflags = '-I' + Dir('./../include').abspath + ' -I' + Dir('#').abspath

        mach_env = env.Clone(MACH=mach,KCFLAGS=kflags,
            tools=[('kmake',{'KERNELDIR': kdir})])
        # Since LINUX_MODULES_INST_PATH is really a scons Variable, the setting gets
        # updated when the clone is created.  Set it now to override it.
        mach_env['LINUX_MODULES_INST_PATH'] = modpath
    else:
        mach_env = env.Clone(MACH=mach)

    for subdir in subdirs:
        vdir ='%s_%s' % (subdir,mach)
        mach_env.SConscript('%s/SConscript' % subdir,
                   variant_dir=vdir,
                   duplicate=1,exports=['first_mach', {'env':mach_env}])

        env.Install('$PREFIX/include/nidas/linux', headers)

        vdirs = [vdirs,vdir]

    first_mach = False

env.Alias('install', [ '$PREFIX/modules' ])

