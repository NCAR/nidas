# -*- python -*-

##  Copyright 2005,2006 UCAR, NCAR, All Rights Reserved

##
##  Import the build environment.
##
Import('env')
arch = env['ARCH']

# The Makefile must be listed in the source dependencies
# so that it is copied/linked to the variant_dir.
# The Kmake builder runs the make command in variant_dir.
#
# Also, the SConscript command that invokes this SConscript
# file should set duplicate=1, so that all the linux module
# source files, including the Makefile, are copied to the variant_dir.
# so that make can find them and do its work outside of the
# source tree.

headers = Split("""
pc104sg.h
""")

if (not env.has_key("LINUX_MODULES") or env['LINUX_MODULES']) and \
    env.has_key('KERNELDIR') and env['KERNELDIR'] != '':

    modules = ['pc104sg.ko']
    env.Kmake(modules, headers + ['pc104sg.c', 'Makefile'])

    env.Install('$PREFIX/linux',modules)

    # env.Clean(arch + '_install',[
    #     '$PREFIX/linux/' + l for l in modules
    #     ])
    env.Clean('install',[
        '$PREFIX/linux/' + l for l in modules
        ])

# Some kernel module header files define symbols that are needed
# by user code. These must also be installed in $PREFIX/include
shared_headers = Split("""
""")

# Alias(arch + '_install',env.Install('$PREFIX/include/nidas/linux/irig', shared_headers))
Alias('install',env.Install('$PREFIX/include/nidas/linux/irig', shared_headers))

apps = Split("""
""")

if arch == 'arm' or arch == "armbe":
    archapps=Split("""
        test_irig.c
    """)
else:
    archapps=Split("""
    """)

nodes = []
for i in apps + archapps:
    nodes += env.Program( i )

env.Install('$PREFIX/bin',nodes)
# env.Clean(arch + '_install', [
#     ('$PREFIX/bin/' + os.path.basename(File(l).path) for l in nodes)
#     ])
env.Clean('install', [
    ('$PREFIX/bin/' + os.path.basename(File(l).path) for l in nodes)
    ])
