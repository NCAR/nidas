# -*- python -*-
## 2006, Copyright University Corporation for Atmospheric Research


##
##  Import the build environment.
##
Import('env')
arch = env['ARCH']  # empty string for native builds

# Use the OTHER_ prefix only if it exists and is different than PREFIX
if env.get('OTHER_PREFIX') and env['PREFIX'] != env.subst(env['OTHER_PREFIX']):
    import os
    other_include = env.subst("$OTHER_PREFIX/include")
    other_lib = env.subst("$OTHER_PREFIX/lib")
    if os.path.exists(other_include):
        print("Adding OTHER_PREFIX %s to CPPPATH." % (other_include))
        env.AppendUnique(CPPPATH = [ other_include ])
    if os.path.exists(other_lib):
        print("Adding OTHER_PREFIX %s to LIBPATH." % (other_lib))
        env.AppendUnique(LIBPATH = [ other_lib ])

# -rdynamic: Export all dynamic symbols in the executables, so that libraries
# loaded with dlopen() can resolve symbols already in the executable.
# See "man dlopen" for more info.
env.AppendUnique(LINKFLAGS=['-rdynamic'])

#############################################################################
# These comments apply to the arm-linux-ld and armbe-linux-ld that we are using,
# version 2.16.1.  Versions of ld for x86 in EL5 and Fedora are able to find
# libnidas with a -Ldir when linking against libnidas_dynld.so, and do not
# need the -rpath-link option. But we'll leave it in anyhow for x86.
#
# When ld is resolving these internal dependencies between
# shared libraries it does not search the -Ldir (LIBPATH) directories.
# Instead it searches these paths: -rpath-link, -rpath, $LD_RUN_PATH,
# $LD_LIBRARY_PATH, $DT_RUN_PATH,$DT_RPATH,/lib,/usr/lib and ld.so.conf.
# See man ld, under -rpath-link.
#
# Hence these -rpath-link options to search the build directories
# at link time.  Note that the run-time linker does not use
# -rpath-link, it uses -rpath
#
# Here's an example of the error that occurs when linking an executable
# program from nidas/apps:
# /opt/arcom/lib/gcc/arm-linux/3.4.4/../../../../arm-linux/bin/ld:
# warning: libnidas.so, needed by build_arm/build_dynld/libnidas_dynld.so, not found (try using -rpath or -rpath-link)
#############################################################################
#
env.Append(LINKFLAGS=
    ['-Xlinker','-rpath-link=' + env.Dir('util').path + ':' + env.Dir('core').path])
# ['-Xlinker','-rpath=' + env.Dir('$PREFIX').path])


# To decipher the link statement:
# print 'LINKCOM=' + str(env['LINKCOM'])
# print '_LIBDIRFLAGS=' + str(env['_LIBDIRFLAGS'])
# print '_LIBFLAGS=' + str(env['_LIBFLAGS'])

# Check for headers and libraries
# Results will be in build/include/nidas/Config.h
#
# Can't seem to put the log_file in any directory other than the current
# source directory.
# log_file=Dir('#build').File('quack.log'),
# log_file=Dir('#log' + arch).File('quack.log').abspath,
conf = env.Configure(conf_dir=".sconf_temp",
        log_file='#/config' + arch +'.log',
        config_h="include/nidas/Config.h")

conf.CheckCHeader('sys/capability.h')

conf.CheckCHeader('sys/inotify.h')

conf.CheckCHeader('bzlib.h')

conf.CheckCHeader(['sys/socket.h','bluetooth/bluetooth.h',
                      'bluetooth/rfcomm.h'],"<>")

conf.CheckCHeader(['time.h','timepps.h'])

# glibcs on Eurotech systems don't currently have ppoll or epoll_pwait
conf.CheckFunc("ppoll")

conf.CheckFunc("epoll_pwait")

# Check for nc_server header and library on /opt/nc_server
env.GlobalVariables().Update(env)
nc_server_prefix = env.get('NC_SERVER_PREFIX', '/opt/nc_server')
nclibpath = Dir(nc_server_prefix).Dir(arch).Dir('lib')
env_save = env.Clone()
conf.env.Append(LIBPATH=nclibpath.path)
print("Checking for libnc_server_rpc in %s..." % (str(nclibpath)))
if conf.CheckLib('nc_server_rpc'):
    conf.env.Append(CPPPATH=Dir(nc_server_prefix).Dir('include'))
    conf.CheckLibWithHeader('nc_server_rpc', 'nc_server_rpc.h','C++',
        'xdr_connection(0,0);',autoadd=1)
else:
    conf.env = env_save

if conf.CheckCXXHeader('gsl/gsl_linalg.h'):
    if not conf.CheckLibWithHeader('gsl', 'gsl/gsl_linalg.h','C',
        'gsl_linalg_LU_solve(0,0,0,0);',autoadd=1):
        # Prior to version 1.15 of gsl, have to also search gslcblas.
        conf.env.Append(LIBS=['gslcblas'])
        conf.CheckLibWithHeader('gsl', 'gsl/gsl_linalg.h','C',
            'gsl_linalg_LU_solve(0,0,0,0);',autoadd=1)

env = conf.Finish()

env.Install('$PREFIX/include/nidas','include/nidas/Config.h')

# Update Revision.h from git describe
info1 = env.GitInfo("include/nidas/Revision.h", "#/nidas")
info2 = env.GitInfo("include/nidas/linux/Revision.h", "#/nidas/linux")

env.Install('$PREFIX/include/nidas',info1)
env.Install('$PREFIX/include/nidas/linux',info2)

# When duplicate=0, the variant_dir of this SConscript, 
# ("build","build_arm" or "build_armbe") is not duplicated using
# symbolic or hard links from the source dir, "nidas".
# Instead scons puts the two paths in the compile runstring where
# appropriate, including possibly duplicating items in the CPPPATH
# to search for headers in both the variant_dir and the source dir.
# If you specify CPPPATH="include", scons adds the successive
# SConscript dirs to the path, and creates two -I options in the compiles:
#   -Ibuild/core/include and -Inidas/core/include

# This hack using Dir() results in the CPPPATH not being duplicated
# in the compile and successive variant_dirs not being added:
#   -Ibuild/include
env.PrependUnique(CPPPATH = Dir('.').Dir('include'))

subdirs=Split("""util core dynld apps linux""")

for dir in subdirs:
    SConscript('%s/SConscript' % dir,
               duplicate=0,exports={'env':env})

Alias('lib', subdirs[0:3])
Clean('lib', subdirs[0:3])

env.Alias('install', [ '$PREFIX' ])

# Don't want to do a Clean of $PREFIX here, in case there is
# other stuff there from other packages: we won't own $PREFIX.
# We can nuke $PREFIX/include/nidas, but don't do a global
# Clean of $PREFIX/bin and lib.  Also we don't assume we
# own $PREFIX/modules.
env.Clean('install','$PREFIX/include/nidas')
