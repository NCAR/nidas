# -*- python -*-

##  Copyright 2005 UCAR, NCAR, All Rights Reserved

import glob
import fnmatch
import os

##
##  Import the cross-build environment.
##
Import('env')
# env = env.Clone()
arch = env['ARCH']

# major and minor number of shareable library, libnidas_util.so.major.minor
major = '1'
minor = '0'

# env.AppendUnique(CXXFLAGS = Split("""
# """))

##
##  List of headers files
##
headers = [ Split("""
    BitArray.h
    BluetoothAddress.h
    BluetoothRFCommSocket.h
    BluetoothRFCommSocketAddress.h
    Bzip2FileSet.h
    DatagramPacket.h
    EndianConverter.h
    EOFException.h
    Exception.h
    FileSet.h
    Inet4Address.h
    Inet4NetworkInterface.h
    Inet4PacketInfo.h
    Inet4SocketAddress.h
    InterruptedException.h
    InvalidParameterException.h
    IOException.h
    IOTimeoutException.h
    Logger.h
    McSocket.h
    ParseException.h
    Process.h
    SerialOptions.h
    SerialPort.h
    SocketAddress.h
    Socket.h
    Termios.h
    Thread.h
    ThreadSupport.h
    UnixSocketAddress.h
    UnknownHostException.h
    UTime.h
    util.h
    """)
]
# print(["headers="] + [str(h) for h in headers])

sources = [ Split("""
    BitArray.cc
    BluetoothAddress.cc
    BluetoothRFCommSocket.cc
    BluetoothRFCommSocketAddress.cc
    Bzip2FileSet.cc
    EndianConverter.cc
    Exception.cc
    FileSet.cc
    Inet4Address.cc
    Inet4SocketAddress.cc
    Logger.cc
    McSocket.cc
    Process.cc
    SerialOptions.cc
    SerialPort.cc
    Socket.cc
    Termios.cc
    Thread.cc
    ThreadSupport.cc
    UnixSocketAddress.cc
    UTime.cc
    util.cc
    """)
]
# print(["sources="] + [str(h) for h in sources])

objects = env.SharedObject(sources)
# env['NIDAS_UTIL_OBJECTS'] = objects

##
##  Build the libnidas_util library.
##
conf = Configure(env)
if conf.CheckLib('bz2'):
    conf.env.AppendUnique(LIBS = 'bz2')
if conf.CheckLib('bluetooth'):
    conf.env.AppendUnique(LIBS = 'bluetooth')
env = conf.Finish()

# libnidas_util.so
libname = env.subst('$SHLIBPREFIX') + 'nidas_util' + env.subst('$SHLIBSUFFIX')

# libnidas_util.so.major
soname = libname + '.' + major

# build libnidas_util.so.major.minor, adding '.major.minor' to SHLIBSUFFIX
lib = env.SharedLibrary('nidas_util' , objects,
    LIBS=env['LIBS'] + ['pthread'],
    SHLIBSUFFIX=env.subst('$SHLIBSUFFIX') + '.' + major + '.' + minor,
    SHLINKFLAGS=[env["SHLINKFLAGS"] + ['-Wl,-soname=' + soname]])

# link libnidas_util.so.major.minor to libnidas_util.so
env.Command(libname,lib,'cd $TARGET.dir; ln -sf $SOURCE.file $TARGET.file')

# link libnidas_util.so.major.minor to libnidas_util.so.major
env.Command(soname,lib,'cd $TARGET.dir; ln -sf $SOURCE.file $TARGET.file')

env['LIBNIDAS_UTIL'] = libname

slib = env.StaticLibrary('nidas_util' , objects)

##
## Install targets for libraries and headers.
##
nodes = []
nodes += env.Install('$PREFIX/lib',lib)
nodes += env.Command('$PREFIX/lib/' + libname,lib,'cd $TARGET.dir; ln -sf $SOURCE.file $TARGET.file')
nodes += env.Command('$PREFIX/lib/' + soname,lib,'cd $TARGET.dir; ln -sf $SOURCE.file $TARGET.file')
# nodes += env.Install('$PREFIX/lib',libname)
# nodes += env.Install('$PREFIX/lib',soname)
nodes += env.Install('$PREFIX/lib',slib)
nodes += env.Install('$PREFIX/include/nidas/util',headers)
Alias('install',nodes)

# env.Clean(arch + '_install', nodes)
env.Clean('install', nodes)
