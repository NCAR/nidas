# -*- python -*-
# 2006, Copyright University Corporation for Atmospheric Research

from SCons.Script import Environment, Export

env = Environment(tools=['default', 'symlink', 'sharedlibrary'])

#
#  List of headers files
#
headers = env.Split("""
    auto_ptr.h
    BitArray.h
    BluetoothAddress.h
    BluetoothRFCommSocket.h
    BluetoothRFCommSocketAddress.h
    Bzip2FileSet.h
    DatagramPacket.h
    EndianConverter.h
    EOFException.h
    Exception.h
    FileSet.h
    GPS.h
    Inet4Address.h
    Inet4NetworkInterface.h
    Inet4PacketInfo.h
    Inet4SocketAddress.h
    InterruptedException.h
    InvalidParameterException.h
    IOException.h
    IOTimeoutException.h
    Logger.h
    McSocket.h
    MutexCount.h
    ParseException.h
    Process.h
    SerialOptions.h
    SerialPort.h
    SocketAddress.h
    Socket.h
    Termios.h
    Thread.h
    ThreadSupport.h
    time_constants.h
    UnixSocketAddress.h
    UnknownHostException.h
    UTime.h
    util.h
    """)

sources = env.Split("""
    BitArray.cc
    BluetoothAddress.cc
    BluetoothRFCommSocket.cc
    BluetoothRFCommSocketAddress.cc
    Bzip2FileSet.cc
    EndianConverter.cc
    Exception.cc
    FileSet.cc
    GPS.cc
    Inet4Address.cc
    Inet4NetworkInterface.cc
    Inet4SocketAddress.cc
    Logger.cc
    McSocket.cc
    Process.cc
    SerialOptions.cc
    SerialPort.cc
    Socket.cc
    Termios.cc
    Thread.cc
    ThreadSupport.cc
    UnixSocketAddress.cc
    UTime.cc
    util.cc
    """)

objects = env.SharedObject(sources)

#
#  Build the libnidas_util library.
#
conf = env.NidasConfigure()
conf.CheckLib('cap')
conf.CheckLib('bz2')
conf.CheckLib('bluetooth')
conf.CheckCHeader('sys/capability.h')
conf.CheckCHeader('bzlib.h')
conf.CheckCHeader(['sys/socket.h', 'bluetooth/bluetooth.h',
                   'bluetooth/rfcomm.h'], "<>")

# glibcs on Eurotech systems don't currently have ppoll or epoll_pwait
conf.CheckFunc("ppoll")
conf.CheckFunc("epoll_pwait")
env = conf.Finish()

# build libnidas_util.so
lib = env.SharedLibrary3('$VARIANT_DIR/lib/nidas_util', objects,
                         LIBS=['pthread'] + env['LIBS'])

slib = env.StaticLibrary('$VARIANT_DIR/lib/nidas_util', objects)

env.Default([lib, slib])

#
# Install targets for libraries and headers.
#
nodes = []
nodes += env.SharedLibrary3Install('$PREFIX', lib)
nodes += env.Install('$PREFIX/lib', slib)
nodes += env.Install('$PREFIX/include/nidas/util', headers)

env.Alias('install', nodes)


def libnidas_util(env):
    env.Append(LIBS=['nidas_util'])


Export('libnidas_util')
