# -*- python -*-
#
Import('env')
env = env.Clone()
arch = env['ARCH']  # empty string for native builds

Import(['LIBNIDAS_UTIL' + arch,'LIBNIDAS' + arch,'LIBNIDAS_DYNLD' + arch])
libutil = locals()['LIBNIDAS_UTIL' + arch]
libnidas = locals()['LIBNIDAS' + arch]
libdynld = locals()['LIBNIDAS_DYNLD' + arch]

libs = [libutil,libnidas,libdynld]

ldlibdirs = [ l.Dir('').abspath for l in env.File(libs) ]
env['ENV']['LD_LIBRARY_PATH'] = ":".join(ldlibdirs)

env.Prepend( LIBS= libs, LIBPATH=ldlibdirs)

env.Append(LIBS = ['boost_unit_test_framework', 'boost_regex'])
env.Prepend(CPPPATH = [ '#/src' ])
env.Append(CCFLAGS = ['-Wall'])

tests = env.Program('tiostream', "tiostream.cc")
# env.Depends(tests, libs)

# Add --log_level=all to see all the log messages
runtest = env.Command("xtest", tests, ["$SOURCE.abspath"])
env.Precious(runtest)
AlwaysBuild(runtest)
Alias('test', runtest)



