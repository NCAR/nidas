# -*- python -*-

Import('env')
env = env.Clone()
arch = env['ARCH']

Import(['LIBNIDAS_UTIL_' + arch,'LIBNIDAS_' + arch,'LIBNIDAS_DYNLD_' + arch])
libutil = locals()['LIBNIDAS_UTIL_' + arch]
libnidas = locals()['LIBNIDAS_' + arch]
libdynld = locals()['LIBNIDAS_DYNLD_' + arch]

libs = [libutil,libnidas,libdynld]

ldlibdirs = [ l.Dir('').abspath for l in env.File(libs) ]
env['ENV']['LD_LIBRARY_PATH'] = ":".join(ldlibdirs)

# We set LIBS to 'nidas_util',etc rather than the imported LIBNIDAS_*,
# because the latter puts the relative path to the library in
# the executable, which is then not runnable from the shell
# script which does a cd to $SOURCE.dir before running the executable.
libs = ['nidas_util','nidas','nidas_dynld']

env.Prepend( LIBS=libs, LIBPATH=ldlibdirs)
env.Append( LIBS=['xerces-c'])

env.Prepend(CPPPATH = [ '#/src' ])
env.Append(CCFLAGS = ['-Wall'])

tests = env.Program('ck_iterators', "ck_iterators.cc")

# runtest = env.Command("ck_itrs",tests,["valgrind $SOURCE.abspath ${SOURCE.dir}/iterator_test.xml"])
runtest = env.Command("ck_itrs",[tests,"run_test.sh"],["cd ${SOURCE.dir} && ./run_test.sh"])
env.Precious(runtest)
AlwaysBuild(runtest)
Alias('ck_itrs', runtest)
Alias('test', runtest)

