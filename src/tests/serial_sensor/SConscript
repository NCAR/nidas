# -*- python -*-

Import(['env','LIBNIDAS_UTIL','LIBNIDAS','LIBNIDAS_DYNLD','NIDAS_APPS'])
env = env.Clone()
libs = [LIBNIDAS_UTIL,LIBNIDAS,LIBNIDAS_DYNLD]

# Set LD_LIBRARY_PATH to the locally build libraries.
ldlibdirs = [ l.Dir('').abspath for l in env.File(libs) ]
env['ENV']['LD_LIBRARY_PATH'] = ":".join(ldlibdirs)

dsm = NIDAS_APPS['dsm']
dsm_server = NIDAS_APPS['dsm_server']
data_stats = NIDAS_APPS['data_stats']
sensor_sim = NIDAS_APPS['sensor_sim']
auto_cal = NIDAS_APPS['auto_cal']
print "auto_cal=" + str(auto_cal)

path = env.subst("${TARGET.dir}", target=dsm)
env.PrependENVPath('PATH', path)
# print 'path=' + path
# env.PrependENVPath('PATH', env.Dir('#/build_x86/build_apps').abspath)

# run_test.sh and run_test_2.sh conflict with each other. They use the same 
# pseudo-terminals, and kill other dsm processes at startup.
# So they are run in sequence here by the shell. Otherwise, if they are separate
# targets, "scons -j 2 test" is likely to run them simultaneously.
#
depends = ["run_test.sh","run_test_2.sh",  dsm, data_stats, sensor_sim]
runtest = env.Command("xtest1", depends, ["cd $SOURCE.dir && ./run_test.sh && ./run_test_2.sh"])

env.Precious(runtest)
env.AlwaysBuild(runtest)
env.Alias('test', runtest)
env.Alias('sstest', runtest)
