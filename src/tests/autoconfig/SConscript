# -*- python -*-

from SCons.Script import Import

Import('env')
env = env.Clone(tools = ['nidas', 'valgrind', 'nidasdynld'])

env.Append(CXXFLAGS='-Wno-effc++')
env.Append(LIBS = env.NidasLibs())
env.Append(LIBS = ['boost_unit_test_framework'])
env.Prepend(CPPPATH = [ "#/nidas/util", "#/nidas/core" ])
sources = env.Split("""
tSerialSensor.cc
tgill.cc
tgpio.cc
""")
tests = env.Program('tSerialSensorAutoConfig', sources)

env.AppendENVPath('LD_LIBRARY_PATH', '/opt/nc_server/lib')
env.NidasRuntimeENV()
runtest = env.Command("xtest", tests,
                      env.ChdirActions(["./$SOURCE.file --log_level=message"]))
env.Precious(runtest)
env.AlwaysBuild(runtest)
env.Alias('test', runtest)

env.ValgrindLog('memcheck', 
                env.Command('vg.memcheck.log', tests,
                            "cd ${SOURCE.dir} && "
                            "${VALGRIND_PATH} --leak-check=full --show-leak-kinds=all"
                            " --gen-suppressions=all --suppressions=vg.memcheck.supp"
                            " ./${SOURCE.file} --log_level=message"
                            " >& ${TARGET.abspath}"))

env.ValgrindLog('threadcheck', 
                env.Command('vg.threadcheck.log', tests,
                            "cd ${SOURCE.dir} && "
                            "${VALGRIND_PATH} --tool=helgrind"
                            " --gen-suppressions=all --suppressions=vg.threadcheck.supp"
                            " ./${SOURCE.file} --log_level=message"
                            " >& ${TARGET.abspath}"))

def write_env(env, target, source):
    "Write a sh file with env settings which can be sourced to run tests."
    out = open(str(target[0]), "w")
    for s in source:
        out.write("export LD_LIBRARY_PATH=%s:${LD_LIBRARY_PATH}\n" %
                  (str(s.dir.get_abspath())))
    out.close()

env.Command('libs.sh', ["$LIBNIDAS", "$LIBNIDAS_UTIL", "$LIBNIDAS_DYNLD"], write_env)


