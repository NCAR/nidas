# -*- python -*-
#
Import('env')
env = env.Clone()
arch = env['ARCH']

Import(['LIBNIDAS_UTIL_' + arch,'LIBNIDAS_' + arch,'LIBNIDAS_DYNLD_' + arch,'NIDAS_APPS_' + arch])
libutil = locals()['LIBNIDAS_UTIL_' + arch]
libnidas = locals()['LIBNIDAS_' + arch]
libdynld = locals()['LIBNIDAS_DYNLD_' + arch]
apps = locals()['NIDAS_APPS_' + arch]

libs = [libutil,libnidas,libdynld]

# Set LD_LIBRARY_PATH to the locally build libraries.
ldlibdirs = [ l.Dir('').abspath for l in env.File(libs) ]
env['ENV']['LD_LIBRARY_PATH'] = ":".join(ldlibdirs)

sync_server = apps['sync_server']
sync_dump = apps['sync_dump']

path = env.subst("${TARGET.dir}", target=sync_server)
env.PrependENVPath('PATH', path)
# print 'path=' + path
# env.PrependENVPath('PATH', env.Dir('#/build_x86/build_apps').abspath)

depends1 = ["run_test.sh",  sync_server, sync_dump]
runtest1 = env.Command("xtest1", depends1, ["cd $SOURCE.dir && ./run_test.sh"])

testlist = [runtest1]

env.Precious(testlist)
env.AlwaysBuild(testlist)
env.Alias('test', testlist)
env.Alias('synctest', testlist)
