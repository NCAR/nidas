# -*- python -*-

Import('env')
env = env.Clone()

# Set LD_LIBRARY_PATH to the locally build libraries.
# bdirs = [ 'dynld', 'core', 'util' ]
# ldlibdirs = [ env.Dir('#/build_x86/build_%s' % d).abspath for d in bdirs ]
libs = [ env.GetGlobalTarget(name) for name in
         ['libnidas', 'libnidas_util', 'libnidas_dynld'] ]
env.Prepend(
    LIBS= [ env.subst("${TARGET.file}", target=l) for l in libs ],
    LIBPATH=[ l.Dir('') for l in env.File(libs) ])
env.Prepend(CPPPATH = [ '#/src' ])
env.Append(CCFLAGS = ['-Wall'])

tests = env.Program('dns_lookup', "dns_lookup.cc")

ldlibdirs = [ l.Dir('').abspath for l in env.File(libs) ]
# print 'ldlibdir=' + ":".join(ldlibdirs)
env['ENV']['LD_LIBRARY_PATH'] = ":".join(ldlibdirs)

runtest = env.Command("dns_test", tests, ["$SOURCE.abspath"])
env.Precious(runtest)
AlwaysBuild(runtest)
Alias('test', runtest)

