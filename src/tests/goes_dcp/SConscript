# -*- python -*-

Import('env')
env = env.Clone()

# Set LD_LIBRARY_PATH to the locally build libraries.
# bdirs = [ 'dynld', 'core', 'util' ]
# ldlibdirs = [ env.Dir('#/build_x86/build_%s' % d).abspath for d in bdirs ]
libs = [ env.GetGlobalTarget(name) for name in
         ['libnidas', 'libnidas_util', 'libnidas_dynld'] ]
ldlibdirs = [ l.Dir('').abspath for l in env.File(libs) ]
# print 'ldlibdir=' + ":".join(ldlibdirs)
env['ENV']['LD_LIBRARY_PATH'] = ":".join(ldlibdirs)

pdecode = env['NIDAS_APPS']['pdecode']

path = env.subst("${TARGET.dir}", target=pdecode)
env.PrependENVPath('PATH', path)
# print 'path=' + path
# env.PrependENVPath('PATH', env.Dir('#/build_x86/build_apps').abspath)

depends = ["run_test.sh",  pdecode]
runtest = env.Command("goes_dcp", depends, ["cd $SOURCE.dir && ./run_test.sh"])

env.Precious(runtest)
env.AlwaysBuild(runtest)
env.Alias('test', runtest)
env.Alias('goes_dcp_test', runtest)
