# -*- python -*-
#
Import('env')
env = env.Clone()
arch = env['ARCH']

Import(['LIBNIDAS_UTIL_' + arch,'LIBNIDAS_' + arch,'LIBNIDAS_DYNLD_' + arch,'NIDAS_APPS_' + arch])
libutil = locals()['LIBNIDAS_UTIL_' + arch]
libnidas = locals()['LIBNIDAS_' + arch]
libdynld = locals()['LIBNIDAS_DYNLD_' + arch]
apps = locals()['NIDAS_APPS_' + arch]

libs = [libutil,libnidas,libdynld]

# Set LD_LIBRARY_PATH to the locally build libraries.
ldlibdirs = [ l.Dir('').abspath for l in env.File(libs) ]
env['ENV']['LD_LIBRARY_PATH'] = ":".join(ldlibdirs)

pdecode = apps['pdecode']

path = env.subst("${TARGET.dir}", target=pdecode)
env.PrependENVPath('PATH', path)
# print 'path=' + path
# env.PrependENVPath('PATH', env.Dir('#/build_x86/build_apps').abspath)

depends = ["run_test.sh",  pdecode]
runtest = env.Command("goes_dcp", depends, ["cd $SOURCE.dir && ./run_test.sh"])

env.Precious(runtest)
env.AlwaysBuild(runtest)
env.Alias('test', runtest)
env.Alias('goes_dcp_test', runtest)
