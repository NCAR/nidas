# -*- python -*-

print "Note: the two serial_sensor tests will conflict with each other if they run simultaneously\nDon't use \"scons -j N\" with N > 1"

Import('env')
env = env.Clone()

# Set LD_LIBRARY_PATH to the locally build libraries.
# bdirs = [ 'dynld', 'core', 'util' ]
# ldlibdirs = [ env.Dir('#/build_x86/build_%s' % d).abspath for d in bdirs ]
libs = [ env.GetGlobalTarget(name) for name in
         ['libnidas', 'libnidas_util', 'libnidas_dynld'] ]
ldlibdirs = [ l.Dir('').abspath for l in env.File(libs) ]
# print 'ldlibdir=' + ":".join(ldlibdirs)
env['ENV']['LD_LIBRARY_PATH'] = ":".join(ldlibdirs)

dsm = env['NIDAS_APPS']['dsm']
dsm_server = env['NIDAS_APPS']['dsm_server']
data_stats = env['NIDAS_APPS']['data_stats']
sensor_sim = env['NIDAS_APPS']['sensor_sim']

path = env.subst("${TARGET.dir}", target=dsm)
env.PrependENVPath('PATH', path)
# print 'path=' + path
# env.PrependENVPath('PATH', env.Dir('#/build_x86/build_apps').abspath)

# run_test.sh and run_test_2.sh conflict with each other. They use the same 
# pseudo-terminals, and kill other dsm processes at startup.
# So they are run in sequence here by the shell. Otherwise, if they are separate
# targets, "scons -j 2 test" is likely to run them simultaneously.
#
depends = ["run_test.sh","run_test_2.sh",  dsm, data_stats, sensor_sim]
runtest = env.Command("xtest1", depends, ["cd $SOURCE.dir && ./run_test.sh && ./run_test_2.sh"])

env.Precious(runtest)
env.AlwaysBuild(runtest)
env.Alias('test', runtest)
env.Alias('sstest', runtest)
